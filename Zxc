-- // Variables
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")
local coregui = game:GetService("CoreGui")
local httpService = game:GetService("HttpService")

local lp = players.LocalPlayer
local mouse = lp:GetMouse()

-- math
local clamp = math.clamp
local floor = math.floor

-- roblox constructors
local newUDim2 = UDim2.new
local newUDim = UDim.new
local newVector2 = Vector2.new
local newColor3 = Color3.new
local fromRGB = Color3.fromRGB
local newColorSequence = ColorSequence.new
local newColorSequenceKeypoint = ColorSequenceKeypoint.new
local newInstance = Instance.new

-- // Library
local library = {
	windows = {},
	connections = {},
	flags = {},
	activeSlider = nil,
	
	Theme = {
		["Background"] = fromRGB(20, 15, 15),
		["Inline"] = fromRGB(25, 20, 20),
		["Page Background"] = fromRGB(22, 20, 20),
		["Border"] = fromRGB(10, 10, 10),
		["Outline"] = fromRGB(32, 27, 27),
		["Accent"] = fromRGB(255, 58, 58),
		["Element"] = fromRGB(36, 33, 33),
		["Hovered Element"] = fromRGB(43, 38, 38),
		["Text"] = fromRGB(215, 215, 215),
		["Text Border"] = fromRGB(0, 0, 0)
	},
	
	Folders = {
		Directory = "typescript",
		Assets = "typescript/Assets"
	},
	
	Font = nil
}

library.__index = library

-- // Utility
local utility = {}

do -- // Font Setup
	for _, folderName in library.Folders do
		if not isfolder(folderName) then
			makefolder(folderName)
		end
	end
	
	local fontName = "Windows-XP-Tahoma"
	local fontPath = library.Folders.Assets .. "/" .. fontName
	
	if not isfile(fontPath .. ".json") then
		if not isfile(fontPath .. ".ttf") then
			writefile(fontPath .. ".ttf", game:HttpGet("https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/windows-xp-tahoma.ttf"))
		end
		
		local fontData = {
			name = fontName,
			faces = {{
				name = "Regular",
				weight = 200,
				style = "Regular",
				assetId = getcustomasset(fontPath .. ".ttf")
			}}
		}
		
		writefile(fontPath .. ".json", httpService:JSONEncode(fontData))
	end
	
	library.Font = Font.new(getcustomasset(fontPath .. ".json"))
end

do -- // Utility Functions
	function utility:create(className, properties)
		local instance = newInstance(className)
		
		for property, value in pairs(properties) do
			instance[property] = value
		end
		
		return instance
	end
	
	function utility:tween(object, properties, duration, easingStyle)
		local tweenInfo = TweenInfo.new(
			duration or 0.2,
			easingStyle or Enum.EasingStyle.Quad,
			Enum.EasingDirection.Out
		)
		
		local tween = tweenService:Create(object, tweenInfo, properties)
		tween:Play()
		
		return tween
	end
	
	function utility:draggify(frame)
		local dragging = false
		local dragStart = nil
		local startPos = nil
		
		frame.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = true
				dragStart = input.Position
				startPos = frame.Position
			end
		end)
		
		frame.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = false
			end
		end)
		
		uis.InputChanged:Connect(function(input)
			if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
				local delta = input.Position - dragStart
				frame.Position = newUDim2(
					startPos.X.Scale,
					startPos.X.Offset + delta.X,
					startPos.Y.Scale,
					startPos.Y.Offset + delta.Y
				)
			end
		end)
	end
end

-- // Library Functions
function library:CreateWindow(properties)
	properties = properties or {}
	
	local window = {
		name = properties.Name or "UI Library",
		size = properties.Size or newUDim2(0, 600, 0, 400),
		tabs = {},
		currentTab = nil
	}
	
	do -- // Window UI
		-- screengui
		local screenGui = utility:create("ScreenGui", {
			Name = "MainScreenGUI",
			Parent = coregui,
			ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		})
		
		-- mainframe
		local mainFrame = utility:create("Frame", {
			Name = "MainFrame",
			Parent = screenGui,
			BackgroundColor3 = library.Theme["Background"],
			BorderColor3 = library.Theme["Border"],
			BorderSizePixel = 0,
			Position = newUDim2(0.257073551, 0, 0.152512997, 0),
			Size = window.size,
			ZIndex = 99
		})
		
		-- mainframe stroke
		utility:create("UIStroke", {
			Parent = mainFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- top accent line
		local topAccentLine = utility:create("Frame", {
			Name = "TopAccentLine",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Accent"],
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(0, window.size.X.Offset, 0, 2),
			ZIndex = 100
		})
		
		-- uistroke for accent line
		utility:create("UIStroke", {
			Parent = topAccentLine,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- inline frame (внутренняя рамка)
		local inlineFrame = utility:create("Frame", {
			Name = "InlineFrame",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Inline"],
			BorderColor3 = library.Theme["Outline"],
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 0, 20),
			Size = newUDim2(1, -14, 1, -27),
			ZIndex = 99
		})
		
		-- inline stroke
		utility:create("UIStroke", {
			Parent = inlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Outline"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- inner border stroke
		utility:create("UIStroke", {
			Parent = inlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- tabs holder
		local tabsHolder = utility:create("Frame", {
			Name = "TabsHolder",
			Parent = inlineFrame,
			BackgroundColor3 = library.Theme["Inline"],
			BackgroundTransparency = 1,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 0, 7),
			Size = newUDim2(1, -14, 0, 15),
			ZIndex = 100
		})
		
		-- list layout
		local listLayout = utility:create("UIListLayout", {
			Parent = tabsHolder,
			FillDirection = Enum.FillDirection.Horizontal,
			SortOrder = Enum.SortOrder.LayoutOrder
		})
		
		-- menu name holder
		local menuNameHolder = utility:create("Frame", {
			Name = "MenuNameHolder",
			Parent = inlineFrame,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 0.990,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 1, -22),
			Size = newUDim2(1, -14, 0, 15),
			ZIndex = 100
		})
		
		-- name text
		local nameText = utility:create("TextLabel", {
			Name = "NameText",
			Parent = menuNameHolder,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 1.000,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(1, 0, 1, 0),
			FontFace = library.Font,
			Text = window.name,
			TextColor3 = library.Theme["Text"],
			TextSize = 12
		})
		
		-- text stroke
		utility:create("UIStroke", {
			Parent = nameText,
			Color = library.Theme["Text Border"],
			Thickness = 1
		})
		
		-- subtabs main frame (справа от mainFrame)
		local subTabsMainFrame = utility:create("Frame", {
			Name = "SubTabsMainFrame",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Background"],
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme["Border"],
			BorderSizePixel = 0,
			Position = newUDim2(1, 7, 0, 0),
			Size = newUDim2(0, 50, 1, 0),
			Visible = false,
			ZIndex = 100
		})
		
		-- subtabs main frame stroke
		utility:create("UIStroke", {
			Parent = subTabsMainFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- top accent line for subtabs
		local subTabsAccentLine = utility:create("Frame", {
			Name = "TopAccentLine",
			Parent = subTabsMainFrame,
			BackgroundColor3 = library.Theme["Accent"],
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(1, 0, 0, 2),
			ZIndex = 101
		})
		
		-- uistroke for subtabs accent line
		utility:create("UIStroke", {
			Parent = subTabsAccentLine,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- subtabs inline frame
		local subTabsInlineFrame = utility:create("Frame", {
			Name = "SubTabsInlineFrame",
			Parent = subTabsMainFrame,
			BackgroundColor3 = library.Theme["Inline"],
			BorderColor3 = library.Theme["Outline"],
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 0, 20),
			Size = newUDim2(1, -14, 1, -27),
			ZIndex = 101
		})
		
		-- subtabs inline stroke
		utility:create("UIStroke", {
			Parent = subTabsInlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Outline"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- subtabs inner border stroke
		utility:create("UIStroke", {
			Parent = subTabsInlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- subtabs holder (прозрачный контейнер, выровнен с tabs)
		local subTabsHolder = utility:create("Frame", {
			Name = "SubTabsHolder",
			Parent = subTabsInlineFrame,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 0, 0, 0),
			Size = newUDim2(1, 0, 1, 0),
			ZIndex = 102
		})
		
		-- subtabs list layout (вертикальный)
		utility:create("UIListLayout", {
			Parent = subTabsHolder,
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = newUDim(0, 0),
			HorizontalAlignment = Enum.HorizontalAlignment.Center
		})
		
		-- index
		window.gui = screenGui
		window.frame = mainFrame
		window.inlineFrame = inlineFrame
		window.tabsHolder = tabsHolder
		window.subTabsMainFrame = subTabsMainFrame
		window.subTabsHolder = subTabsHolder
		window.nameText = nameText
		
		-- draggable
		utility:draggify(mainFrame)
	end
	
	do -- // Window Functions
		function window:SetTab(tab)
			for _, t in pairs(window.tabs) do
				if t.open and t ~= tab then
					t:Set(false)
				end
			end
			
			window.currentTab = tab
			
			-- show/hide subtabs holder
			if tab and #tab.subtabs > 0 then
				window.subTabsMainFrame.Visible = true
				
				-- hide all subtabs first
				for _, t in pairs(window.tabs) do
					for _, subtab in pairs(t.subtabs) do
						subtab.button.Visible = false
					end
				end
				
				-- show current tab subtabs
				for _, subtab in pairs(tab.subtabs) do
					subtab.button.Visible = true
				end
				
				-- open first subtab if none open
				local hasOpenSubTab = false
				for _, subtab in pairs(tab.subtabs) do
					if subtab.open then
						hasOpenSubTab = true
						break
					end
				end
				
				if not hasOpenSubTab and #tab.subtabs > 0 then
					tab.subtabs[1]:Set(true)
				end
			else
				window.subTabsMainFrame.Visible = false
			end
		end
		
		function window:CreateTab(properties)
			properties = properties or {}
			
			local tab = {
				text = properties.Text or "Tab",
				open = false,
				window = window,
				subtabs = {},
				currentSubTab = nil,
				columns = properties.Columns or 2,
				columnsData = {},
				sections = {}
			}
			
			do -- // Tab UI
				-- tab button
				local tabButton = utility:create("TextButton", {
					Name = "TAB",
					Parent = window.tabsHolder,
					BackgroundColor3 = library.Theme["Background"],
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Size = newUDim2(0, 50, 0, 15),
					FontFace = library.Font,
					Text = tab.text,
					TextColor3 = library.Theme["Text"],
					TextSize = 12,
					TextWrapped = true
				})
				
				-- button outline
				utility:create("UIStroke", {
					Parent = tabButton,
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					Color = library.Theme["Outline"],
					Thickness = 1,
					LineJoinMode = Enum.LineJoinMode.Miter,
					Transparency = 0.3
				})
				
				-- text stroke
				utility:create("UIStroke", {
					Parent = tabButton,
					Color = library.Theme["Text Border"],
					Thickness = 1
				})
				
				-- tab content frame (сдвигаем вправо если есть подвкладки)
				local tabContent = utility:create("Frame", {
					Name = "TabContent",
					Parent = window.inlineFrame,
					BackgroundColor3 = library.Theme["Inline"],
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = newUDim2(0, 7, 0, 29),
					Size = newUDim2(1, -14, 1, -51),
					Visible = false,
					ZIndex = 100
				})
				
				-- columns holder (невидимый контейнер для колонок)
				local columnsHolder = utility:create("Frame", {
					Name = "ColumnsHolder",
					Parent = tabContent,
					BackgroundColor3 = fromRGB(255, 255, 255),
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = newUDim2(0, 0, 0, 0),
					Size = newUDim2(1, 0, 1, 0),
					ZIndex = 100
				})
				
				-- uigridlayout для колонок
				utility:create("UIGridLayout", {
					Parent = columnsHolder,
					CellPadding = newUDim2(0, 8, 0, 0),
					CellSize = newUDim2(1 / tab.columns, -8 * (tab.columns - 1) / tab.columns, 1, 0),
					FillDirection = Enum.FillDirection.Horizontal,
					SortOrder = Enum.SortOrder.LayoutOrder
				})
				
				-- padding для columns holder
				utility:create("UIPadding", {
					Parent = columnsHolder,
					PaddingTop = newUDim(0, 6),
					PaddingBottom = newUDim(0, 6),
					PaddingLeft = newUDim(0, 6),
					PaddingRight = newUDim(0, 6)
				})
				
				-- создаем колонки
				for i = 1, tab.columns do
					local column = utility:create("ScrollingFrame", {
						Name = "Column" .. i,
						Parent = columnsHolder,
						Active = true,
						BackgroundColor3 = library.Theme["Background"],
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						ScrollBarThickness = 2,
						ScrollBarImageColor3 = library.Theme["Accent"],
						CanvasSize = newUDim2(0, 0, 0, 0),
						ZIndex = 101,
						ScrollingDirection = Enum.ScrollingDirection.Y,
						VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
					})
					
					-- uilistlayout для секций в колонке
					local listLayout = utility:create("UIListLayout", {
						Parent = column,
						Padding = newUDim(0, 8),
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					-- padding для колонки
					utility:create("UIPadding", {
						Parent = column,
						PaddingTop = newUDim(0, 0),
						PaddingBottom = newUDim(0, 6),
						PaddingLeft = newUDim(0, 0),
						PaddingRight = newUDim(0, 6)
					})
					
					-- авторазмер canvas
					listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
						column.CanvasSize = newUDim2(0, 0, 0, listLayout.AbsoluteContentSize.Y + 6)
					end)
					
					tab.columnsData[i] = column
				end
				
				-- index
				tab.button = tabButton
				tab.content = tabContent
				tab.columnsHolder = columnsHolder
				
				-- button logic
				tabButton.MouseButton1Click:Connect(function()
					if not tab.open then
						tab:Set(true)
					end
				end)
				
				-- hover effects
				tabButton.MouseEnter:Connect(function()
					if not tab.open then
						utility:tween(tabButton, {TextColor3 = library.Theme["Hovered Element"]}, 0.15)
					end
				end)
				
				tabButton.MouseLeave:Connect(function()
					if not tab.open then
						utility:tween(tabButton, {TextColor3 = library.Theme["Text"]}, 0.15)
					end
				end)
			end
			
			do -- // Tab Functions
				function tab:Set(state)
					if state then
						-- закрываем все другие табы
						for _, otherTab in pairs(window.tabs) do
							if otherTab ~= tab and otherTab.open then
								otherTab.open = false
								otherTab.content.Visible = false
								utility:tween(otherTab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
								
								-- закрываем все подвкладки другого таба
								for _, subtab in pairs(otherTab.subtabs) do
									if subtab.content then
										subtab.content.Visible = false
									end
								end
							end
						end
						
						-- открываем текущий таб
						tab.open = true
						tab.content.Visible = true
						utility:tween(tab.button, {TextColor3 = library.Theme["Accent"]}, 0.2)
						window:SetTab(tab)
						
						-- если есть подвкладки, открываем первую открытую или первую по списку
						if #tab.subtabs > 0 then
							local hasOpenSubTab = false
							for _, subtab in pairs(tab.subtabs) do
								if subtab.open then
									subtab.content.Visible = true
									hasOpenSubTab = true
									break
								end
							end
							
							if not hasOpenSubTab and #tab.subtabs > 0 then
								tab.subtabs[1]:Set(true)
							end
						end
					else
						-- закрываем текущий таб
						tab.open = false
						tab.content.Visible = false
						utility:tween(tab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
						
						-- закрываем все подвкладки
						for _, subtab in pairs(tab.subtabs) do
							if subtab.content then
								subtab.content.Visible = false
							end
						end
					end
				end
			end
			
			-- auto open first tab
			if #window.tabs == 0 then
				tab:Set(true)
			end
			
			do -- // SubTab Functions
				function tab:CreateSubTab(properties)
					properties = properties or {}
					
					local subtab = {
						text = properties.Text or "SubTab",
						open = false,
						tab = tab,
						window = window,
						columns = properties.Columns or 2,
						columnsData = {},
						sections = {}
					}
					
					do -- // SubTab UI
						-- subtab button
						local subTabButton = utility:create("TextButton", {
							Name = "SUBTAB",
							Parent = window.subTabsHolder,
							BackgroundColor3 = library.Theme["Background"],
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(0, 50, 0, 15),
							FontFace = library.Font,
							Text = subtab.text,
							TextColor3 = library.Theme["Text"],
							TextSize = 12,
							TextWrapped = true,
							Visible = false,
							ZIndex = 102
						})
						
						-- text stroke
						utility:create("UIStroke", {
							Parent = subTabButton,
							Color = library.Theme["Text Border"],
							Thickness = 1
						})
						
						-- subtab content frame
						local subTabContent = utility:create("Frame", {
							Name = "SubTabContent",
							Parent = window.inlineFrame,
							BackgroundColor3 = library.Theme["Inline"],
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 7, 0, 29),
							Size = newUDim2(1, -14, 1, -51),
							Visible = false,
							ZIndex = 100
						})
						
						-- columns holder для subtab
						local subColumnsHolder = utility:create("Frame", {
							Name = "ColumnsHolder",
							Parent = subTabContent,
							BackgroundColor3 = fromRGB(255, 255, 255),
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 0, 0, 0),
							Size = newUDim2(1, 0, 1, 0),
							ZIndex = 100
						})
						
						-- uigridlayout
						utility:create("UIGridLayout", {
							Parent = subColumnsHolder,
							CellPadding = newUDim2(0, 8, 0, 0),
							CellSize = newUDim2(1 / subtab.columns, -8 * (subtab.columns - 1) / subtab.columns, 1, 0),
							FillDirection = Enum.FillDirection.Horizontal,
							SortOrder = Enum.SortOrder.LayoutOrder
						})
						
						-- padding
						utility:create("UIPadding", {
							Parent = subColumnsHolder,
							PaddingTop = newUDim(0, 6),
							PaddingBottom = newUDim(0, 6),
							PaddingLeft = newUDim(0, 6),
							PaddingRight = newUDim(0, 6)
						})
						
						-- создаем колонки для subtab
						for i = 1, subtab.columns do
							local column = utility:create("ScrollingFrame", {
								Name = "Column" .. i,
								Parent = subColumnsHolder,
								Active = true,
								BackgroundColor3 = library.Theme["Background"],
								BackgroundTransparency = 1,
								BorderColor3 = fromRGB(0, 0, 0),
								BorderSizePixel = 0,
								ScrollBarThickness = 2,
								ScrollBarImageColor3 = library.Theme["Accent"],
								CanvasSize = newUDim2(0, 0, 0, 0),
								ZIndex = 101,
								ScrollingDirection = Enum.ScrollingDirection.Y,
								VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
							})
							
							local listLayout = utility:create("UIListLayout", {
								Parent = column,
								Padding = newUDim(0, 8),
								SortOrder = Enum.SortOrder.LayoutOrder
							})
							
							utility:create("UIPadding", {
								Parent = column,
								PaddingTop = newUDim(0, 0),
								PaddingBottom = newUDim(0, 6),
								PaddingLeft = newUDim(0, 0),
								PaddingRight = newUDim(0, 6)
							})
							
							listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
								column.CanvasSize = newUDim2(0, 0, 0, listLayout.AbsoluteContentSize.Y + 6)
							end)
							
							subtab.columnsData[i] = column
						 end
						
						-- index
						subtab.button = subTabButton
						subtab.content = subTabContent
						subtab.columnsHolder = subColumnsHolder
						
						-- button logic
						subTabButton.MouseButton1Click:Connect(function()
							if not subtab.open then
								subtab:Set(true)
							end
						end)
						
						-- hover effects
						subTabButton.MouseEnter:Connect(function()
							if not subtab.open then
								utility:tween(subTabButton, {TextColor3 = library.Theme["Hovered Element"]}, 0.15)
							end
						end)
						
						subTabButton.MouseLeave:Connect(function()
							if not subtab.open then
								utility:tween(subTabButton, {TextColor3 = library.Theme["Text"]}, 0.15)
							end
						end)
					end
					
					do -- // SubTab Functions
						function subtab:Set(state)
							subtab.open = state
							
							-- close other subtabs in same tab
							if state then
								for _, st in pairs(tab.subtabs) do
									if st ~= subtab and st.open then
										st:Set(false)
									end
								end
								tab.currentSubTab = subtab
							end
							
							-- update visibility
							subtab.content.Visible = subtab.open
							
							-- update colors
							if subtab.open then
								utility:tween(subtab.button, {TextColor3 = library.Theme["Accent"]}, 0.2)
							else
								utility:tween(subtab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
							end
						end
						
						function subtab:CreateSection(properties)
							properties = properties or {}
							
							local section = {
								name = properties.Name or "Section",
								side = properties.Side or 1,
								subtab = subtab
							}
							
							do -- // Section UI
								local sectionFrame = utility:create("Frame", {
									Name = "Section",
									Parent = subtab.columnsData[section.side],
									BackgroundColor3 = library.Theme["Inline"],
									BackgroundTransparency = 0,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Size = newUDim2(1, 0, 0, 0),
									AutomaticSize = Enum.AutomaticSize.Y,
									ZIndex = 102
								})
								
								-- section outline
								utility:create("UIStroke", {
									Parent = sectionFrame,
									ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
									Color = library.Theme["Outline"],
									Thickness = 1,
									LineJoinMode = Enum.LineJoinMode.Miter
								})
								
								-- section background
								local sectionBackground = utility:create("Frame", {
									Name = "Background",
									Parent = sectionFrame,
									BackgroundColor3 = library.Theme["Page Background"],
									BackgroundTransparency = 0,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 1, 0, 1),
									Size = newUDim2(1, -2, 1, -2),
									ZIndex = 102
								})
								
								-- section text
								local sectionText = utility:create("TextLabel", {
									Name = "Title",
									Parent = sectionBackground,
									BackgroundTransparency = 1,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 6, 0, 4),
									AutomaticSize = Enum.AutomaticSize.XY,
									FontFace = library.Font,
									Text = section.name,
									TextColor3 = library.Theme["Text"],
									TextSize = 12,
									ZIndex = 103
								})
								
								-- text stroke
								utility:create("UIStroke", {
									Parent = sectionText,
									Color = library.Theme["Text Border"],
									Thickness = 1,
									LineJoinMode = Enum.LineJoinMode.Miter
								})
								
								-- accent line
								local accentLine = utility:create("Frame", {
									Name = "AccentLine",
									Parent = sectionBackground,
									BackgroundColor3 = library.Theme["Accent"],
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Size = newUDim2(1, 0, 0, 2),
									ZIndex = 103
								})
								
								-- elements container
								local elementsContainer = utility:create("Frame", {
									Name = "Elements",
									Parent = sectionBackground,
									BackgroundTransparency = 1,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 0, 0, 20),
									Size = newUDim2(1, 0, 1, -20),
									AutomaticSize = Enum.AutomaticSize.Y,
									ZIndex = 102
								})
								
								-- uilistlayout
								utility:create("UIListLayout", {
									Parent = elementsContainer,
									Padding = newUDim(0, 4),
									HorizontalAlignment = Enum.HorizontalAlignment.Center,
									SortOrder = Enum.SortOrder.LayoutOrder
								})
								
								-- padding
								utility:create("UIPadding", {
									Parent = elementsContainer,
									PaddingTop = newUDim(0, 4),
									PaddingBottom = newUDim(0, 4),
									PaddingLeft = newUDim(0, 4),
									PaddingRight = newUDim(0, 4)
								})
								
								-- index
								section.frame = sectionFrame
								section.background = sectionBackground
								section.container = elementsContainer
								section.text = sectionText
							end
							
							subtab.sections[#subtab.sections + 1] = section
							
							-- AddToggle для секции
							function section:AddToggle(properties)
								properties = properties or {}
								
								local toggle = {
									name = properties.Name or "Toggle",
									flag = properties.Flag or properties.Name or "Toggle",
									value = properties.Default or false,
									callback = properties.Callback or function() end
								}
								
								local toggleButton, indicator, toggleText
								
								do -- // Toggle UI
									-- toggle button (прозрачная кнопка на всю ширину)
									toggleButton = utility:create("TextButton", {
										Name = "Toggle",
										Parent = section.container,
										BackgroundColor3 = library.Theme["Background"],
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(1, 0, 0, 15),
										AutoButtonColor = false,
										Text = "",
										ZIndex = 103
									})
									
									-- indicator (квадрат 10x10)
									indicator = utility:create("Frame", {
										Name = "Indicator",
										Parent = toggleButton,
										BackgroundColor3 = library.Theme["Element"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										AnchorPoint = newVector2(0, 0.5),
										Position = newUDim2(0, 0, 0.5, 0),
										Size = newUDim2(0, 10, 0, 10),
										ZIndex = 104
									})
									
									-- indicator outline
									utility:create("UIStroke", {
										Parent = indicator,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- indicator gradient
									utility:create("UIGradient", {
										Parent = indicator,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
											newColorSequenceKeypoint(1, fromRGB(127, 127, 127))
										})
									})
									
									-- toggle text
									toggleText = utility:create("TextLabel", {
										Name = "Text",
										Parent = toggleButton,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 18, 0, -1),
										Size = newUDim2(1, -18, 1, 0),
										FontFace = library.Font,
										Text = toggle.name,
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										ZIndex = 104
									})
									
									-- index
									toggle.button = toggleButton
									toggle.indicator = indicator
									toggle.text = toggleText
								end
								
								do -- // Toggle Functions
									function toggle:Set(value)
										toggle.value = value
										library.flags[toggle.flag] = toggle.value
										
										if toggle.value then
											-- включен - красный акцент
											utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Accent"]}, 0.2)
											utility:tween(toggle.text, {TextColor3 = library.Theme["Accent"]}, 0.2)
										else
											-- выключен - серый
											utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
											utility:tween(toggle.text, {TextColor3 = library.Theme["Text"]}, 0.2)
										end
										
										-- callback
										toggle.callback(toggle.value)
									end
									
									function toggle:Get()
										return toggle.value
									end
								end
								
								-- click event (оптимизировано - MouseButton1Click вместо MouseButton1Down)
							library.connections[#library.connections + 1] = toggleButton.MouseButton1Click:Connect(function()
								toggle:Set(not toggle.value)
							end)
								
								-- set default
								if properties.Default then
									toggle:Set(properties.Default)
								end
								
								return toggle
							end
							
							-- AddSlider для секции
							function section:AddSlider(properties)
								properties = properties or {}
								
								local slider = {
									name = properties.Name or "Slider",
									flag = properties.Flag or properties.Name or "Slider",
									min = properties.Min or 0,
									max = properties.Max or 100,
									default = properties.Default or 50,
									decimals = properties.Decimals or 1,
									suffix = properties.Suffix or "",
									value = properties.Default or 50,
									callback = properties.Callback or function() end,
									dragging = false
								}
								
								local sliderFrame, sliderText, sliderOutline, sliderBackground, sliderFill, sliderValue
								
								do -- // Slider UI
									-- slider frame
									sliderFrame = utility:create("Frame", {
										Name = "Slider",
										Parent = section.container,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(1, 0, 0, slider.name and 27 or 10),
										ZIndex = 103
									})
									
									-- slider text (название)
									if slider.name then
										sliderText = utility:create("TextLabel", {
											Name = "Text",
											Parent = sliderFrame,
											BackgroundTransparency = 1,
											BorderColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 0),
											Size = newUDim2(1, -2, 0, 12),
											FontFace = library.Font,
											Text = slider.name,
											TextColor3 = library.Theme["Text"],
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											ZIndex = 104
										})
										
										utility:create("UIStroke", {
											Parent = sliderText,
											Color = library.Theme["Text Border"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
									end
									
									-- slider outline (кнопка для драга)
									sliderOutline = utility:create("TextButton", {
										Name = "Outline",
										Parent = sliderFrame,
										BackgroundColor3 = library.Theme["Outline"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 4, 0, slider.name and 17 or 0),
										Size = newUDim2(1, -8, 0, 10),
										AutoButtonColor = false,
										Text = "",
										ZIndex = 104
									})
									
									-- slider background
									sliderBackground = utility:create("Frame", {
										Name = "Background",
										Parent = sliderOutline,
										BackgroundColor3 = library.Theme["Element"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 1, 0, 1),
										Size = newUDim2(1, -2, 1, -2),
										ZIndex = 105
									})
									
									-- background gradient
									utility:create("UIGradient", {
										Parent = sliderBackground,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(30, 30, 35)),
											newColorSequenceKeypoint(1, fromRGB(23, 23, 28))
										})
									})
									
									-- slider fill (акцент)
									sliderFill = utility:create("Frame", {
										Name = "Fill",
										Parent = sliderBackground,
										BackgroundColor3 = library.Theme["Accent"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(0.5, 0, 1, 0),
										ZIndex = 106
									})
									
									-- fill gradient
									utility:create("UIGradient", {
										Parent = sliderFill,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
											newColorSequenceKeypoint(1, fromRGB(42, 42, 42))
										})
									})
									
									-- slider value text
									sliderValue = utility:create("TextLabel", {
										Name = "Value",
										Parent = sliderFill,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										AnchorPoint = newVector2(0.5, 0.5),
										Position = newUDim2(1, 0, 0.5, 1),
										Size = newUDim2(0, 50, 0, 12),
										FontFace = library.Font,
										Text = "50",
										TextColor3 = fromRGB(235, 235, 235),
										TextSize = 12,
										ZIndex = 107
									})
									
									utility:create("UIStroke", {
										Parent = sliderValue,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- index
									slider.frame = sliderFrame
									slider.text = sliderText
									slider.outline = sliderOutline
									slider.background = sliderBackground
									slider.fill = sliderFill
									slider.valueLabel = sliderValue
								end
								
								do -- // Slider Functions
									function slider:Set(value)
										slider.value = clamp(floor(value / slider.decimals + 0.5) * slider.decimals, slider.min, slider.max)
										library.flags[slider.flag] = slider.value
										
										-- update value text
										slider.valueLabel.Text = tostring(slider.value) .. slider.suffix
										
										-- update fill size
										local percentage = (slider.value - slider.min) / (slider.max - slider.min)
										utility:tween(slider.fill, {Size = newUDim2(percentage, 0, 1, 0)}, 0.1)
										
										-- callback
										slider.callback(slider.value)
									end
									
									function slider:Get()
										return slider.value
									end
									
									function slider:UpdateValue()
										local mousePos = uis:GetMouseLocation().X
										local sliderPos = slider.outline.AbsolutePosition.X
										local sliderSize = slider.outline.AbsoluteSize.X
										local percentage = clamp((mousePos - sliderPos) / sliderSize, 0, 1)
										local value = slider.min + (slider.max - slider.min) * percentage
										slider:Set(value)
									end
								end
								
								-- dragging logic (оптимизировано)
								library.connections[#library.connections + 1] = sliderOutline.MouseButton1Down:Connect(function()
									library.activeSlider = slider
									slider:UpdateValue()
								end)
								
								-- set default
								slider:Set(slider.default)
								
								return slider
							end
							
							-- AddDropdown для секции
							function section:AddDropdown(properties)
								properties = properties or {}
								
								local dropdown = {
									name = properties.Name or "Dropdown",
									flag = properties.Flag or properties.Name or "Dropdown",
									items = properties.Items or {"Option 1", "Option 2", "Option 3"},
									default = properties.Default or nil,
									multi = properties.Multi or false,
									value = properties.Multi and {} or nil,
									callback = properties.Callback or function() end,
									isOpen = false,
									options = {}
								}
								
								local dropdownFrame, dropdownText, dropdownButton, dropdownValue, dropdownIcon, optionHolder
								
								do -- // Dropdown UI
									-- dropdown frame
									dropdownFrame = utility:create("Frame", {
										Name = "Dropdown",
										Parent = section.container,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(1, 0, 0, 34),
										ZIndex = 103
									})
									
									-- dropdown text (название)
									dropdownText = utility:create("TextLabel", {
										Name = "Text",
										Parent = dropdownFrame,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 0, 0, 0),
										Size = newUDim2(1, 0, 0, 13),
										FontFace = library.Font,
										Text = dropdown.name,
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										ZIndex = 104
									})
									
									utility:create("UIStroke", {
										Parent = dropdownText,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- dropdown button
									dropdownButton = utility:create("Frame", {
										Name = "Button",
										Parent = dropdownFrame,
										BackgroundColor3 = library.Theme["Background"],
										BorderColor3 = library.Theme["Border"],
										BorderSizePixel = 2,
										Position = newUDim2(0, 0, 1, -17),
										Size = newUDim2(1, 0, 0, 17),
										ZIndex = 104
									})
									
									-- button gradient
									utility:create("UIGradient", {
										Parent = dropdownButton,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
											newColorSequenceKeypoint(1, fromRGB(100, 100, 100))
										})
									})
									
									-- button outline
									utility:create("UIStroke", {
										Parent = dropdownButton,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- dropdown value text
									dropdownValue = utility:create("TextLabel", {
										Name = "Value",
										Parent = dropdownButton,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 5, 0, -1),
										Size = newUDim2(1, -25, 1, 0),
										FontFace = library.Font,
										Text = "--",
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										TextTruncate = Enum.TextTruncate.AtEnd,
										ZIndex = 105
									})
									
									utility:create("UIStroke", {
										Parent = dropdownValue,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- dropdown icon (+/-)
									dropdownIcon = utility:create("TextLabel", {
										Name = "Icon",
										Parent = dropdownButton,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, -4, 0, -1),
										Size = newUDim2(1, 0, 1, 0),
										FontFace = library.Font,
										Text = "+",
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Right,
										ZIndex = 105
									})
									
									utility:create("UIStroke", {
										Parent = dropdownIcon,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- option holder
									optionHolder = utility:create("Frame", {
										Name = "OptionHolder",
										Parent = dropdownFrame,
										BackgroundColor3 = library.Theme["Inline"],
										BorderColor3 = library.Theme["Border"],
										BorderSizePixel = 2,
										Position = newUDim2(0, 0, 1, 5),
										Size = newUDim2(1, 0, 0, 0),
										AutomaticSize = Enum.AutomaticSize.Y,
										Visible = false,
										ZIndex = 115
									})
									
									utility:create("UIStroke", {
										Parent = optionHolder,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									utility:create("UIListLayout", {
										Parent = optionHolder,
										SortOrder = Enum.SortOrder.LayoutOrder
									})
									
									utility:create("UIPadding", {
										Parent = optionHolder,
										PaddingBottom = newUDim(0, 2)
									})
									
									-- index
									dropdown.frame = dropdownFrame
									dropdown.text = dropdownText
									dropdown.button = dropdownButton
									dropdown.valueLabel = dropdownValue
									dropdown.icon = dropdownIcon
									dropdown.holder = optionHolder
								end
								
								do -- // Dropdown Functions
									function dropdown:AddOption(optionName)
										local optionButton = utility:create("TextButton", {
											Name = "Option",
											Parent = dropdown.holder,
											BackgroundTransparency = 1,
											BorderColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Size = newUDim2(1, 0, 0, 15),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 116
										})
										
										local optionText = utility:create("TextLabel", {
											Name = "Text",
											Parent = optionButton,
											BackgroundTransparency = 1,
											BorderColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Position = newUDim2(0, 5, 0, 0),
											Size = newUDim2(1, -5, 1, 0),
											FontFace = library.Font,
											Text = optionName,
											TextColor3 = library.Theme["Text"],
											TextTransparency = 0.48,
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											ZIndex = 117
										})
										
										utility:create("UIStroke", {
											Parent = optionText,
											Color = library.Theme["Text Border"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										local optionData = {
											name = optionName,
											selected = false,
											button = optionButton,
											text = optionText
										}
										
										function optionData:Toggle(state)
											if state then
												utility:tween(optionData.text, {TextColor3 = library.Theme["Accent"], TextTransparency = 0}, 0.2)
											else
												utility:tween(optionData.text, {TextColor3 = library.Theme["Text"], TextTransparency = 0.48}, 0.2)
											end
										end
										
										optionButton.MouseButton1Click:Connect(function()
											if dropdown.multi then
												-- multi select
												optionData.selected = not optionData.selected
												optionData:Toggle(optionData.selected)
												
												local index = table.find(dropdown.value, optionName)
												if index then
													table.remove(dropdown.value, index)
												else
													table.insert(dropdown.value, optionName)
												end
												
												library.flags[dropdown.flag] = dropdown.value
												dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
												dropdown.callback(dropdown.value)
											else
												-- single select
												for _, opt in pairs(dropdown.options) do
													opt.selected = false
													opt:Toggle(false)
												end
												
												optionData.selected = true
												optionData:Toggle(true)
												dropdown.value = optionName
												library.flags[dropdown.flag] = dropdown.value
												dropdown.valueLabel.Text = optionName
												dropdown.callback(dropdown.value)
												dropdown:SetOpen(false)
											end
										end)
										
										dropdown.options[optionName] = optionData
										return optionData
									end
									
									function dropdown:SetOpen(state)
										dropdown.isOpen = state
										dropdown.holder.Visible = state
										dropdown.icon.Text = state and "-" or "+"
										dropdown.icon.Position = state and newUDim2(0, -5, 0, -1) or newUDim2(0, -4, 0, -1)
									end
									
									function dropdown:Set(value)
										if dropdown.multi then
											if type(value) ~= "table" then return end
											dropdown.value = value
											
											for _, opt in pairs(dropdown.options) do
												opt.selected = false
												opt:Toggle(false)
											end
											
											for _, v in pairs(value) do
												if dropdown.options[v] then
													dropdown.options[v].selected = true
													dropdown.options[v]:Toggle(true)
												end
											end
											
											library.flags[dropdown.flag] = dropdown.value
											dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
										else
											if not dropdown.options[value] then return end
											
											for _, opt in pairs(dropdown.options) do
												opt.selected = false
												opt:Toggle(false)
											end
											
											dropdown.options[value].selected = true
											dropdown.options[value]:Toggle(true)
											dropdown.value = value
											library.flags[dropdown.flag] = dropdown.value
											dropdown.valueLabel.Text = value
										end
										
										dropdown.callback(dropdown.value)
									end
									
									function dropdown:Get()
										return dropdown.value
									end
								end
								
								-- add all items
								for _, item in pairs(dropdown.items) do
									dropdown:AddOption(item)
								end
								
								-- создаем невидимую кнопку для клика
								local clickButton = utility:create("TextButton", {
									Parent = dropdownButton,
									BackgroundTransparency = 1,
									Size = newUDim2(1, 0, 1, 0),
									Text = "",
									ZIndex = 106
								})
								
								library.connections[#library.connections + 1] = clickButton.MouseButton1Click:Connect(function()
									dropdown:SetOpen(not dropdown.isOpen)
								end)
								
								-- set default
								if dropdown.default then
									dropdown:Set(dropdown.default)
								end
								
								return dropdown
							end
							
							return section
						end
					end
					
					tab.subtabs[#tab.subtabs + 1] = subtab
					
					return subtab
				end
			end
			
			-- CreateSection для Tab (только если нет subtabs)
			function tab:CreateSection(properties)
				if #tab.subtabs > 0 then
					error("Cannot create section in tab with subtabs. Use subtab:CreateSection() instead.")
					return
				end
				
				properties = properties or {}
				
				local section = {
					name = properties.Name or "Section",
					side = properties.Side or 1,
					tab = tab
				}
				
				do -- // Section UI
					local sectionFrame = utility:create("Frame", {
						Name = "Section",
						Parent = tab.columnsData[section.side],
						BackgroundColor3 = library.Theme["Inline"],
						BackgroundTransparency = 0,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 0),
						AutomaticSize = Enum.AutomaticSize.Y,
						ZIndex = 102
					})
					
					-- section outline
					utility:create("UIStroke", {
						Parent = sectionFrame,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- section background
					local sectionBackground = utility:create("Frame", {
						Name = "Background",
						Parent = sectionFrame,
						BackgroundColor3 = library.Theme["Page Background"],
						BackgroundTransparency = 0,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 1, 0, 1),
						Size = newUDim2(1, -2, 1, -2),
						ZIndex = 102
					})
					
					-- section text
					local sectionText = utility:create("TextLabel", {
						Name = "Title",
						Parent = sectionBackground,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 6, 0, 4),
						AutomaticSize = Enum.AutomaticSize.XY,
						FontFace = library.Font,
						Text = section.name,
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						ZIndex = 103
					})
					
					-- text stroke
					utility:create("UIStroke", {
						Parent = sectionText,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- accent line
					local accentLine = utility:create("Frame", {
						Name = "AccentLine",
						Parent = sectionBackground,
						BackgroundColor3 = library.Theme["Accent"],
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 2),
						ZIndex = 103
					})
					
					-- elements container
					local elementsContainer = utility:create("Frame", {
						Name = "Elements",
						Parent = sectionBackground,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 0, 0, 20),
						Size = newUDim2(1, 0, 1, -20),
						AutomaticSize = Enum.AutomaticSize.Y,
						ZIndex = 102
					})
					
					-- uilistlayout
					utility:create("UIListLayout", {
						Parent = elementsContainer,
						Padding = newUDim(0, 4),
						HorizontalAlignment = Enum.HorizontalAlignment.Center,
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					-- padding
					utility:create("UIPadding", {
						Parent = elementsContainer,
						PaddingTop = newUDim(0, 4),
						PaddingBottom = newUDim(0, 4),
						PaddingLeft = newUDim(0, 4),
						PaddingRight = newUDim(0, 4)
					})
					
					-- index
					section.frame = sectionFrame
					section.background = sectionBackground
					section.container = elementsContainer
					section.text = sectionText
				end
				
				tab.sections[#tab.sections + 1] = section
				
				-- AddToggle для секции (таб без подвкладок)
				function section:AddToggle(properties)
					properties = properties or {}
					
					local toggle = {
						name = properties.Name or "Toggle",
						flag = properties.Flag or properties.Name or "Toggle",
						value = properties.Default or false,
						callback = properties.Callback or function() end
					}
					
					local toggleButton, indicator, toggleText
					
					do -- // Toggle UI
						-- toggle button
						toggleButton = utility:create("TextButton", {
							Name = "Toggle",
							Parent = section.container,
							BackgroundColor3 = library.Theme["Background"],
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(1, 0, 0, 15),
							AutoButtonColor = false,
							Text = "",
							ZIndex = 103
						})
						
						-- indicator
						indicator = utility:create("Frame", {
							Name = "Indicator",
							Parent = toggleButton,
							BackgroundColor3 = library.Theme["Element"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							AnchorPoint = newVector2(0, 0.5),
							Position = newUDim2(0, 0, 0.5, 0),
							Size = newUDim2(0, 10, 0, 10),
							ZIndex = 104
						})
						
						-- indicator outline
						utility:create("UIStroke", {
							Parent = indicator,
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Color = library.Theme["Outline"],
							Thickness = 1,
							LineJoinMode = Enum.LineJoinMode.Miter
						})
						
						-- indicator gradient
						utility:create("UIGradient", {
							Parent = indicator,
							Rotation = 90,
							Color = newColorSequence({
								newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
								newColorSequenceKeypoint(1, fromRGB(127, 127, 127))
							})
						})
						
						-- toggle text
						toggleText = utility:create("TextLabel", {
							Name = "Text",
							Parent = toggleButton,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 18, 0, -1),
							Size = newUDim2(1, -18, 1, 0),
							FontFace = library.Font,
							Text = toggle.name,
							TextColor3 = library.Theme["Text"],
							TextSize = 12,
							TextXAlignment = Enum.TextXAlignment.Left,
							ZIndex = 104
						})
						
						-- index
						toggle.button = toggleButton
						toggle.indicator = indicator
						toggle.text = toggleText
					end
					
					do -- // Toggle Functions
						function toggle:Set(value)
							toggle.value = value
							library.flags[toggle.flag] = toggle.value
							
							if toggle.value then
								utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Accent"]}, 0.2)
								utility:tween(toggle.text, {TextColor3 = library.Theme["Accent"]}, 0.2)
							else
								utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
								utility:tween(toggle.text, {TextColor3 = library.Theme["Text"]}, 0.2)
							end
							
							toggle.callback(toggle.value)
						end
						
						function toggle:Get()
							return toggle.value
						end
					end
					
					-- click event (оптимизировано)
				library.connections[#library.connections + 1] = toggleButton.MouseButton1Click:Connect(function()
					toggle:Set(not toggle.value)
				end)
					
					-- set default
					if properties.Default then
						toggle:Set(properties.Default)
					end
					
					return toggle
				end
				
				-- AddSlider для секции (таб без подвкладок)
				function section:AddSlider(properties)
					properties = properties or {}
					
					local slider = {
						name = properties.Name or "Slider",
						flag = properties.Flag or properties.Name or "Slider",
						min = properties.Min or 0,
						max = properties.Max or 100,
						default = properties.Default or 50,
						decimals = properties.Decimals or 1,
						suffix = properties.Suffix or "",
						value = properties.Default or 50,
						callback = properties.Callback or function() end,
						dragging = false
					}
					
					local sliderFrame, sliderText, sliderOutline, sliderBackground, sliderFill, sliderValue
					
					do -- // Slider UI
						sliderFrame = utility:create("Frame", {
							Name = "Slider",
							Parent = section.container,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(1, 0, 0, slider.name and 27 or 10),
							ZIndex = 103
						})
						
						if slider.name then
							sliderText = utility:create("TextLabel", {
								Name = "Text",
								Parent = sliderFrame,
								BackgroundTransparency = 1,
								BorderColor3 = fromRGB(0, 0, 0),
								BorderSizePixel = 0,
								Position = newUDim2(0, 1, 0, 0),
								Size = newUDim2(1, -2, 0, 12),
								FontFace = library.Font,
								Text = slider.name,
								TextColor3 = library.Theme["Text"],
								TextSize = 12,
								TextXAlignment = Enum.TextXAlignment.Left,
								ZIndex = 104
							})
							
							utility:create("UIStroke", {
								Parent = sliderText,
								Color = library.Theme["Text Border"],
								Thickness = 1,
								LineJoinMode = Enum.LineJoinMode.Miter
							})
						end
						
						sliderOutline = utility:create("TextButton", {
							Name = "Outline",
							Parent = sliderFrame,
							BackgroundColor3 = library.Theme["Outline"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 4, 0, slider.name and 17 or 0),
							Size = newUDim2(1, -8, 0, 10),
							AutoButtonColor = false,
							Text = "",
							ZIndex = 104
						})
						
						sliderBackground = utility:create("Frame", {
							Name = "Background",
							Parent = sliderOutline,
							BackgroundColor3 = library.Theme["Element"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 1, 0, 1),
							Size = newUDim2(1, -2, 1, -2),
							ZIndex = 105
						})
						
						utility:create("UIGradient", {
							Parent = sliderBackground,
							Rotation = 90,
							Color = newColorSequence({
								newColorSequenceKeypoint(0, fromRGB(30, 30, 35)),
								newColorSequenceKeypoint(1, fromRGB(23, 23, 28))
							})
						})
						
						sliderFill = utility:create("Frame", {
							Name = "Fill",
							Parent = sliderBackground,
							BackgroundColor3 = library.Theme["Accent"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(0.5, 0, 1, 0),
							ZIndex = 106
						})
						
						utility:create("UIGradient", {
							Parent = sliderFill,
							Rotation = 90,
							Color = newColorSequence({
								newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
								newColorSequenceKeypoint(1, fromRGB(42, 42, 42))
							})
						})
						
						sliderValue = utility:create("TextLabel", {
							Name = "Value",
							Parent = sliderFill,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							AnchorPoint = newVector2(0.5, 0.5),
							Position = newUDim2(1, 0, 0.5, 1),
							Size = newUDim2(0, 50, 0, 12),
							FontFace = library.Font,
							Text = "50",
							TextColor3 = fromRGB(235, 235, 235),
							TextSize = 12,
							ZIndex = 107
						})
						
						utility:create("UIStroke", {
							Parent = sliderValue,
							Color = library.Theme["Text Border"],
							Thickness = 1,
							LineJoinMode = Enum.LineJoinMode.Miter
						})
						
						slider.frame = sliderFrame
						slider.text = sliderText
						slider.outline = sliderOutline
						slider.background = sliderBackground
						slider.fill = sliderFill
						slider.valueLabel = sliderValue
					end
					
					do -- // Slider Functions
						function slider:Set(value)
							slider.value = clamp(floor(value / slider.decimals + 0.5) * slider.decimals, slider.min, slider.max)
							library.flags[slider.flag] = slider.value
							
							slider.valueLabel.Text = tostring(slider.value) .. slider.suffix
							
							local percentage = (slider.value - slider.min) / (slider.max - slider.min)
							utility:tween(slider.fill, {Size = newUDim2(percentage, 0, 1, 0)}, 0.1)
							
							slider.callback(slider.value)
						end
						
						function slider:Get()
							return slider.value
						end
						
						function slider:UpdateValue()
							local mousePos = uis:GetMouseLocation().X
							local sliderPos = slider.outline.AbsolutePosition.X
							local sliderSize = slider.outline.AbsoluteSize.X
							local percentage = clamp((mousePos - sliderPos) / sliderSize, 0, 1)
							local value = slider.min + (slider.max - slider.min) * percentage
							slider:Set(value)
						end
					end
					
					library.connections[#library.connections + 1] = sliderOutline.MouseButton1Down:Connect(function()
						library.activeSlider = slider
						slider:UpdateValue()
					end)
					
					slider:Set(slider.default)
				
				return slider
			end
			
			-- AddDropdown для секции (таб без подвкладок)
			function section:AddDropdown(properties)
				properties = properties or {}
				
				local dropdown = {
					name = properties.Name or "Dropdown",
					flag = properties.Flag or properties.Name or "Dropdown",
					items = properties.Items or {"Option 1", "Option 2", "Option 3"},
					default = properties.Default or nil,
					multi = properties.Multi or false,
					value = properties.Multi and {} or nil,
					callback = properties.Callback or function() end,
					isOpen = false,
					options = {}
				}
				
				local dropdownFrame, dropdownText, dropdownButton, dropdownValue, dropdownIcon, optionHolder
				
				do -- // Dropdown UI
					dropdownFrame = utility:create("Frame", {
						Name = "Dropdown",
						Parent = section.container,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 34),
						ZIndex = 103
					})
					
					dropdownText = utility:create("TextLabel", {
						Name = "Text",
						Parent = dropdownFrame,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 0, 0, 0),
						Size = newUDim2(1, 0, 0, 13),
						FontFace = library.Font,
						Text = dropdown.name,
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						ZIndex = 104
					})
					
					utility:create("UIStroke", {
						Parent = dropdownText,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					dropdownButton = utility:create("Frame", {
						Name = "Button",
						Parent = dropdownFrame,
						BackgroundColor3 = library.Theme["Background"],
						BorderColor3 = library.Theme["Border"],
						BorderSizePixel = 2,
						Position = newUDim2(0, 0, 1, -17),
						Size = newUDim2(1, 0, 0, 17),
						ZIndex = 104
					})
					
					utility:create("UIGradient", {
						Parent = dropdownButton,
						Rotation = 90,
						Color = newColorSequence({
							newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
							newColorSequenceKeypoint(1, fromRGB(100, 100, 100))
						})
					})
					
					utility:create("UIStroke", {
						Parent = dropdownButton,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					dropdownValue = utility:create("TextLabel", {
						Name = "Value",
						Parent = dropdownButton,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 5, 0, -1),
						Size = newUDim2(1, -25, 1, 0),
						FontFace = library.Font,
						Text = "--",
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTruncate = Enum.TextTruncate.AtEnd,
						ZIndex = 105
					})
					
					utility:create("UIStroke", {
						Parent = dropdownValue,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					dropdownIcon = utility:create("TextLabel", {
						Name = "Icon",
						Parent = dropdownButton,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, -4, 0, -1),
						Size = newUDim2(1, 0, 1, 0),
						FontFace = library.Font,
						Text = "+",
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Right,
						ZIndex = 105
					})
					
					utility:create("UIStroke", {
						Parent = dropdownIcon,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					optionHolder = utility:create("Frame", {
						Name = "OptionHolder",
						Parent = dropdownFrame,
						BackgroundColor3 = library.Theme["Inline"],
						BorderColor3 = library.Theme["Border"],
						BorderSizePixel = 2,
						Position = newUDim2(0, 0, 1, 5),
						Size = newUDim2(1, 0, 0, 0),
						AutomaticSize = Enum.AutomaticSize.Y,
						Visible = false,
						ZIndex = 115
					})
					
					utility:create("UIStroke", {
						Parent = optionHolder,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					utility:create("UIListLayout", {
						Parent = optionHolder,
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					utility:create("UIPadding", {
						Parent = optionHolder,
						PaddingBottom = newUDim(0, 2)
					})
					
					dropdown.frame = dropdownFrame
					dropdown.text = dropdownText
					dropdown.button = dropdownButton
					dropdown.valueLabel = dropdownValue
					dropdown.icon = dropdownIcon
					dropdown.holder = optionHolder
				end
				
				do -- // Dropdown Functions
					function dropdown:AddOption(optionName)
						local optionButton = utility:create("TextButton", {
							Name = "Option",
							Parent = dropdown.holder,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(1, 0, 0, 15),
							AutoButtonColor = false,
							Text = "",
							ZIndex = 116
						})
						
						local optionText = utility:create("TextLabel", {
							Name = "Text",
							Parent = optionButton,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 5, 0, 0),
							Size = newUDim2(1, -5, 1, 0),
							FontFace = library.Font,
							Text = optionName,
							TextColor3 = library.Theme["Text"],
							TextTransparency = 0.48,
							TextSize = 12,
							TextXAlignment = Enum.TextXAlignment.Left,
							ZIndex = 117
						})
						
						utility:create("UIStroke", {
							Parent = optionText,
							Color = library.Theme["Text Border"],
							Thickness = 1,
							LineJoinMode = Enum.LineJoinMode.Miter
						})
						
						local optionData = {
							name = optionName,
							selected = false,
							button = optionButton,
							text = optionText
						}
						
						function optionData:Toggle(state)
							if state then
								utility:tween(optionData.text, {TextColor3 = library.Theme["Accent"], TextTransparency = 0}, 0.2)
							else
								utility:tween(optionData.text, {TextColor3 = library.Theme["Text"], TextTransparency = 0.48}, 0.2)
							end
						end
						
						optionButton.MouseButton1Click:Connect(function()
							if dropdown.multi then
								optionData.selected = not optionData.selected
								optionData:Toggle(optionData.selected)
								
								local index = table.find(dropdown.value, optionName)
								if index then
									table.remove(dropdown.value, index)
								else
									table.insert(dropdown.value, optionName)
								end
								
								library.flags[dropdown.flag] = dropdown.value
								dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
								dropdown.callback(dropdown.value)
							else
								for _, opt in pairs(dropdown.options) do
									opt.selected = false
									opt:Toggle(false)
								end
								
								optionData.selected = true
								optionData:Toggle(true)
								dropdown.value = optionName
								library.flags[dropdown.flag] = dropdown.value
								dropdown.valueLabel.Text = optionName
								dropdown.callback(dropdown.value)
								dropdown:SetOpen(false)
							end
						end)
						
						dropdown.options[optionName] = optionData
						return optionData
					end
					
					function dropdown:SetOpen(state)
						dropdown.isOpen = state
						dropdown.holder.Visible = state
						dropdown.icon.Text = state and "-" or "+"
						dropdown.icon.Position = state and newUDim2(0, -5, 0, -1) or newUDim2(0, -4, 0, -1)
					end
					
					function dropdown:Set(value)
						if dropdown.multi then
							if type(value) ~= "table" then return end
							dropdown.value = value
							
							for _, opt in pairs(dropdown.options) do
								opt.selected = false
								opt:Toggle(false)
							end
							
							for _, v in pairs(value) do
								if dropdown.options[v] then
									dropdown.options[v].selected = true
									dropdown.options[v]:Toggle(true)
								end
							end
							
							library.flags[dropdown.flag] = dropdown.value
							dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
						else
							if not dropdown.options[value] then return end
							
							for _, opt in pairs(dropdown.options) do
								opt.selected = false
								opt:Toggle(false)
							end
							
							dropdown.options[value].selected = true
							dropdown.options[value]:Toggle(true)
							dropdown.value = value
							library.flags[dropdown.flag] = dropdown.value
							dropdown.valueLabel.Text = value
						end
						
						dropdown.callback(dropdown.value)
					end
					
					function dropdown:Get()
						return dropdown.value
					end
				end
				
				for _, item in pairs(dropdown.items) do
					dropdown:AddOption(item)
				end
				
				-- button click (оптимизировано)
				local clickButton = utility:create("TextButton", {
					Parent = dropdownButton,
					BackgroundTransparency = 1,
					Size = newUDim2(1, 0, 1, 0),
					Text = "",
					ZIndex = 106
				})
				
				library.connections[#library.connections + 1] = clickButton.MouseButton1Click:Connect(function()
					dropdown:SetOpen(not dropdown.isOpen)
				end)
				
				if dropdown.default then
					dropdown:Set(dropdown.default)
				end
				
				return dropdown
			end
			
			return section
	end
		
		window.tabs[#window.tabs + 1] = tab
		
		return tab
	 end
	end
	
	library.windows[#library.windows + 1] = window
	
	-- глобальные обработчики для слайдеров (создаются один раз, оптимизированы)
	if #library.windows == 1 then
		local lastUpdate = 0
		local updateInterval = 1/60 -- 60 FPS cap для обновления слайдера
		
		library.connections[#library.connections + 1] = uis.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and library.activeSlider then
				local now = tick()
				if now - lastUpdate >= updateInterval then
					library.activeSlider:UpdateValue()
					lastUpdate = now
				end
			end
		end)
		
		library.connections[#library.connections + 1] = uis.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 and library.activeSlider then
				library.activeSlider:UpdateValue() -- финальное обновление
				library.activeSlider = nil
			end
		end)
	end
	
	return setmetatable(window, library)
end

-- // Example Usage
do
	-- создаем окно
	local window = library:CreateWindow({
		Name = "typescript",
		Size = UDim2.new(0, 600, 0, 700)
	})
	
	-- создаем вкладки
	local aimbotTab = window:CreateTab({
		Text = "Aimbot"
	})
	
	local visualsTab = window:CreateTab({
		Text = "Visuals"
	})
	
	-- создаем подвкладки для Visuals
	local espSubTab = visualsTab:CreateSubTab({
		Text = "ESP",
		Columns = 2
	})
	
	local worldSubTab = visualsTab:CreateSubTab({
		Text = "World",
		Columns = 2
	})
	
	local miscSubTab = visualsTab:CreateSubTab({
		Text = "Misc",
		Columns = 2
	})
	
	-- создаем секции для подвкладок
	local boxSection = espSubTab:CreateSection({
		Name = "Box ESP",
		Side = 1
	})
	
	local healthSection = espSubTab:CreateSection({
		Name = "Health Bar",
		Side = 1
	})
	
	local chamsSection = espSubTab:CreateSection({
		Name = "Chams",
		Side = 2
	})
	
	-- примеры элементов
	boxSection:AddToggle({
		Name = "Enabled",
		Flag = "BoxESP_Enabled",
		Default = false,
		Callback = function(value)
			print("Box ESP:", value)
		end
	})
	
	boxSection:AddSlider({
		Name = "Thickness",
		Flag = "BoxESP_Thickness",
		Min = 1,
		Max = 5,
		Default = 2,
		Decimals = 1,
		Suffix = "px",
		Callback = function(value)
			print("Box Thickness:", value)
		end
	})
	
	healthSection:AddDropdown({
		Name = "Style",
		Flag = "HealthBar_Style",
		Items = {"Bar", "Text", "Both"},
		Default = "Bar",
		Callback = function(value)
			print("Health Style:", value)
		end
	})
	
	local miscTab = window:CreateTab({
		Text = "Misc",
		Columns = 2
	})
	
	-- создаем секцию для таба без подвкладок
	local movementSection = miscTab:CreateSection({
		Name = "Movement",
		Side = 1
	})
	
	local utilitySection = miscTab:CreateSection({
		Name = "Utility",
		Side = 2
	})
	
	
	local settingsTab = window:CreateTab({
		Text = "Settings",
		Columns = 1
	})
	
end
