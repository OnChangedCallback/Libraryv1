-- // Variables
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")
local coregui = game:GetService("CoreGui")
local httpService = game:GetService("HttpService")

local lp = players.LocalPlayer
local mouse = lp:GetMouse()

-- math
local clamp = math.clamp
local floor = math.floor

-- roblox constructors
local newUDim2 = UDim2.new
local newUDim = UDim.new
local newVector2 = Vector2.new
local newColor3 = Color3.new
local fromRGB = Color3.fromRGB
local newColorSequence = ColorSequence.new
local newColorSequenceKeypoint = ColorSequenceKeypoint.new
local newInstance = Instance.new

-- // Library
local library = {
	windows = {},
	connections = {},
	flags = {},
	
	Theme = {
		["Background"] = fromRGB(27, 27, 27),
		["Inline"] = fromRGB(20, 20, 20),
		["Page Background"] = fromRGB(22, 22, 22),
		["Border"] = fromRGB(10, 10, 10),
		["Outline"] = fromRGB(27, 27, 27),
		["Accent"] = fromRGB(165, 58, 255),
		["Element"] = fromRGB(49, 49, 49),
		["Hovered Element"] = fromRGB(60, 60, 60),
		["Text"] = fromRGB(215, 215, 215),
		["Text Border"] = fromRGB(0, 0, 0)
	},
	
	Folders = {
		Directory = "typescript",
		Assets = "typescript/Assets"
	},
	
	Font = nil
}

library.__index = library

-- // Utility
local utility = {}

do -- // Font Setup
	for _, folderName in library.Folders do
		if not isfolder(folderName) then
			makefolder(folderName)
		end
	end
	
	local fontName = "Windows-XP-Tahoma"
	local fontPath = library.Folders.Assets .. "/" .. fontName
	
	if not isfile(fontPath .. ".json") then
		if not isfile(fontPath .. ".ttf") then
			writefile(fontPath .. ".ttf", game:HttpGet("https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/windows-xp-tahoma.ttf"))
		end
		
		local fontData = {
			name = fontName,
			faces = {{
				name = "Regular",
				weight = 200,
				style = "Regular",
				assetId = getcustomasset(fontPath .. ".ttf")
			}}
		}
		
		writefile(fontPath .. ".json", httpService:JSONEncode(fontData))
	end
	
	library.Font = Font.new(getcustomasset(fontPath .. ".json"))
end

do -- // Utility Functions
	function utility:create(className, properties)
		local instance = newInstance(className)
		
		for property, value in pairs(properties) do
			instance[property] = value
		end
		
		return instance
	end
	
	function utility:tween(object, properties, duration, easingStyle)
		local tweenInfo = TweenInfo.new(
			duration or 0.2,
			easingStyle or Enum.EasingStyle.Quad,
			Enum.EasingDirection.Out
		)
		
		local tween = tweenService:Create(object, tweenInfo, properties)
		tween:Play()
		
		return tween
	end
	
	function utility:draggify(frame)
		local dragging = false
		local dragStart = nil
		local startPos = nil
		
		frame.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = true
				dragStart = input.Position
				startPos = frame.Position
			end
		end)
		
		frame.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = false
			end
		end)
		
		uis.InputChanged:Connect(function(input)
			if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
				local delta = input.Position - dragStart
				frame.Position = newUDim2(
					startPos.X.Scale,
					startPos.X.Offset + delta.X,
					startPos.Y.Scale,
					startPos.Y.Offset + delta.Y
				)
			end
		end)
	end
end

-- // Library Functions
function library:CreateWindow(properties)
	properties = properties or {}
	
	local window = {
		name = properties.Name or "UI Library",
		size = properties.Size or newUDim2(0, 600, 0, 400),
		tabs = {},
		currentTab = nil
	}
	
	do -- // Window UI
		-- screengui
		local screenGui = utility:create("ScreenGui", {
			Name = "MainScreenGUI",
			Parent = coregui,
			ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		})
		
		-- mainframe
		local mainFrame = utility:create("Frame", {
			Name = "MainFrame",
			Parent = screenGui,
			BackgroundColor3 = library.Theme["Background"],
			BorderColor3 = library.Theme["Border"],
			BorderSizePixel = 0,
			Position = newUDim2(0.257073551, 0, 0.152512997, 0),
			Size = window.size,
			ZIndex = 99
		})
		
		-- mainframe stroke
		utility:create("UIStroke", {
			Parent = mainFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- top accent line
		local topAccentLine = utility:create("Frame", {
			Name = "TopAccentLine",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Accent"],
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(0, window.size.X.Offset, 0, 2),
			ZIndex = 100
		})
		
		-- uistroke for accent line
		utility:create("UIStroke", {
			Parent = topAccentLine,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- tabs holder
		local tabsHolder = utility:create("Frame", {
			Name = "TabsHolder",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Background"],
			BackgroundTransparency = 0,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 0, 0.00499999989, 0),
			Size = newUDim2(0, window.size.X.Offset, 0, 15)
		})
		
		-- list layout
		local listLayout = utility:create("UIListLayout", {
			Parent = tabsHolder,
			FillDirection = Enum.FillDirection.Horizontal,
			SortOrder = Enum.SortOrder.LayoutOrder
		})
		
		-- menu name holder
		local menuNameHolder = utility:create("Frame", {
			Name = "MenuNameHolder",
			Parent = mainFrame,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 0.990,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 0, 1, -15),
			Size = newUDim2(1, 0, 0, 15)
		})
		
		-- name text
		local nameText = utility:create("TextLabel", {
			Name = "NameText",
			Parent = menuNameHolder,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 1.000,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(1, 0, 1, 0),
			FontFace = library.Font,
			Text = window.name,
			TextColor3 = library.Theme["Text"],
			TextSize = 12
		})
		
		-- text stroke
		utility:create("UIStroke", {
			Parent = nameText,
			Color = library.Theme["Text Border"],
			Thickness = 1
		})
		
		-- subtabs main frame (справа от mainFrame)
		local subTabsMainFrame = utility:create("Frame", {
			Name = "SubTabsMainFrame",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Background"],
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme["Border"],
			BorderSizePixel = 0,
			Position = newUDim2(1.01, 0, 0, 0),
			Size = newUDim2(0, 50, 1, 0),
			Visible = false,
			ZIndex = 100
		})
		
		-- subtabs main frame stroke
		utility:create("UIStroke", {
			Parent = subTabsMainFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- top accent line for subtabs
		local subTabsAccentLine = utility:create("Frame", {
			Name = "TopAccentLine",
			Parent = subTabsMainFrame,
			BackgroundColor3 = library.Theme["Accent"],
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(1, 0, 0, 2),
			ZIndex = 101
		})
		
		-- uistroke for subtabs accent line
		utility:create("UIStroke", {
			Parent = subTabsAccentLine,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- subtabs holder (прозрачный контейнер, выровнен с tabs)
		local subTabsHolder = utility:create("Frame", {
			Name = "SubTabsHolder",
			Parent = subTabsMainFrame,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 0, 0.00499999989, 0),
			Size = newUDim2(1, 0, 1, -2),
			ZIndex = 101
		})
		
		-- subtabs list layout (вертикальный)
		utility:create("UIListLayout", {
			Parent = subTabsHolder,
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = newUDim(0, 0),
			HorizontalAlignment = Enum.HorizontalAlignment.Center
		})
		
		-- index
		window.gui = screenGui
		window.frame = mainFrame
		window.tabsHolder = tabsHolder
		window.subTabsMainFrame = subTabsMainFrame
		window.subTabsHolder = subTabsHolder
		window.nameText = nameText
		
		-- draggable
		utility:draggify(mainFrame)
	end
	
	do -- // Window Functions
		function window:SetTab(tab)
			for _, t in pairs(window.tabs) do
				if t.open and t ~= tab then
					t:Set(false)
				end
			end
			
			window.currentTab = tab
			
			-- show/hide subtabs holder
			if tab and #tab.subtabs > 0 then
				window.subTabsMainFrame.Visible = true
				
				-- hide all subtabs first
				for _, t in pairs(window.tabs) do
					for _, subtab in pairs(t.subtabs) do
						subtab.button.Visible = false
					end
				end
				
				-- show current tab subtabs
				for _, subtab in pairs(tab.subtabs) do
					subtab.button.Visible = true
				end
				
				-- open first subtab if none open
				local hasOpenSubTab = false
				for _, subtab in pairs(tab.subtabs) do
					if subtab.open then
						hasOpenSubTab = true
						break
					end
				end
				
				if not hasOpenSubTab and #tab.subtabs > 0 then
					tab.subtabs[1]:Set(true)
				end
			else
				window.subTabsMainFrame.Visible = false
			end
		end
		
		function window:CreateTab(properties)
			properties = properties or {}
			
			local tab = {
				text = properties.Text or "Tab",
				open = false,
				window = window,
				subtabs = {},
				currentSubTab = nil,
				columns = properties.Columns or 2,
				columnsData = {},
				sections = {}
			}
			
			do -- // Tab UI
				-- tab button
				local tabButton = utility:create("TextButton", {
					Name = "TAB",
					Parent = window.tabsHolder,
					BackgroundColor3 = library.Theme["Background"],
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Size = newUDim2(0, 50, 0, 15),
					FontFace = library.Font,
					Text = tab.text,
					TextColor3 = library.Theme["Text"],
					TextSize = 12,
					TextWrapped = true
				})
				
				-- text stroke
				utility:create("UIStroke", {
					Parent = tabButton,
					Color = library.Theme["Text Border"],
					Thickness = 1
				})
				
				-- tab content frame (сдвигаем вправо если есть подвкладки)
				local tabContent = utility:create("Frame", {
					Name = "TabContent",
					Parent = window.frame,
					BackgroundColor3 = library.Theme["Background"],
					BackgroundTransparency = 0,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = newUDim2(0, 0, 0, 17),
					Size = newUDim2(1, 0, 1, -32),
					Visible = false,
					ZIndex = 99
				})
				
				-- columns holder (невидимый контейнер для колонок)
				local columnsHolder = utility:create("Frame", {
					Name = "ColumnsHolder",
					Parent = tabContent,
					BackgroundColor3 = fromRGB(255, 255, 255),
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = newUDim2(0, 0, 0, 0),
					Size = newUDim2(1, 0, 1, 0),
					ZIndex = 100
				})
				
				-- uigridlayout для колонок
				utility:create("UIGridLayout", {
					Parent = columnsHolder,
					CellPadding = newUDim2(0, 8, 0, 0),
					CellSize = newUDim2(1 / tab.columns, -8 * (tab.columns - 1) / tab.columns, 1, 0),
					FillDirection = Enum.FillDirection.Horizontal,
					SortOrder = Enum.SortOrder.LayoutOrder
				})
				
				-- padding для columns holder
				utility:create("UIPadding", {
					Parent = columnsHolder,
					PaddingTop = newUDim(0, 6),
					PaddingBottom = newUDim(0, 6),
					PaddingLeft = newUDim(0, 6),
					PaddingRight = newUDim(0, 6)
				})
				
				-- создаем колонки
				for i = 1, tab.columns do
					local column = utility:create("ScrollingFrame", {
						Name = "Column" .. i,
						Parent = columnsHolder,
						Active = true,
						BackgroundColor3 = library.Theme["Background"],
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						ScrollBarThickness = 2,
						ScrollBarImageColor3 = library.Theme["Accent"],
						CanvasSize = newUDim2(0, 0, 0, 0),
						ZIndex = 101,
						ScrollingDirection = Enum.ScrollingDirection.Y,
						VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
					})
					
					-- uilistlayout для секций в колонке
					local listLayout = utility:create("UIListLayout", {
						Parent = column,
						Padding = newUDim(0, 8),
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					-- padding для колонки
					utility:create("UIPadding", {
						Parent = column,
						PaddingTop = newUDim(0, 0),
						PaddingBottom = newUDim(0, 6),
						PaddingLeft = newUDim(0, 0),
						PaddingRight = newUDim(0, 6)
					})
					
					-- авторазмер canvas
					listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
						column.CanvasSize = newUDim2(0, 0, 0, listLayout.AbsoluteContentSize.Y + 6)
					end)
					
					tab.columnsData[i] = column
				end
				
				-- index
				tab.button = tabButton
				tab.content = tabContent
				tab.columnsHolder = columnsHolder
				
				-- button logic
				tabButton.MouseButton1Click:Connect(function()
					if not tab.open then
						tab:Set(true)
					end
				end)
				
				-- hover effects
				tabButton.MouseEnter:Connect(function()
					if not tab.open then
						utility:tween(tabButton, {TextColor3 = library.Theme["Hovered Element"]}, 0.15)
					end
				end)
				
				tabButton.MouseLeave:Connect(function()
					if not tab.open then
						utility:tween(tabButton, {TextColor3 = library.Theme["Text"]}, 0.15)
					end
				end)
			end
			
			do -- // Tab Functions
				function tab:Set(state)
					tab.open = state
					
					-- update visibility
					tab.content.Visible = tab.open
					
					-- update text colors
					if tab.open then
						utility:tween(tab.button, {TextColor3 = library.Theme["Accent"]}, 0.2)
						window:SetTab(tab)
					else
						utility:tween(tab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
					end
				end
			end
			
			-- auto open first tab
			if #window.tabs == 0 then
				tab:Set(true)
			end
			
			do -- // SubTab Functions
				function tab:CreateSubTab(properties)
					properties = properties or {}
					
					local subtab = {
						text = properties.Text or "SubTab",
						open = false,
						tab = tab,
						window = window,
						columns = properties.Columns or 2,
						columnsData = {},
						sections = {}
					}
					
					do -- // SubTab UI
						-- subtab button
						local subTabButton = utility:create("TextButton", {
							Name = "SUBTAB",
							Parent = window.subTabsHolder,
							BackgroundColor3 = library.Theme["Background"],
							BackgroundTransparency = 0,
							BorderColor3 = library.Theme["Border"],
							BorderSizePixel = 0,
							Size = newUDim2(0, 50, 0, 15),
							FontFace = library.Font,
							Text = subtab.text,
							TextColor3 = library.Theme["Text"],
							TextSize = 12,
							TextWrapped = true,
							Visible = false,
							ZIndex = 102
						})
						
						-- text stroke
						utility:create("UIStroke", {
							Parent = subTabButton,
							Color = library.Theme["Text Border"],
							Thickness = 1
						})
						
						-- subtab content frame
						local subTabContent = utility:create("Frame", {
							Name = "SubTabContent",
							Parent = window.frame,
							BackgroundColor3 = library.Theme["Background"],
							BackgroundTransparency = 0,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 0, 0, 17),
							Size = newUDim2(1, 0, 1, -32),
							Visible = false,
							ZIndex = 99
						})
						
						-- columns holder для subtab
						local subColumnsHolder = utility:create("Frame", {
							Name = "ColumnsHolder",
							Parent = subTabContent,
							BackgroundColor3 = fromRGB(255, 255, 255),
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 0, 0, 0),
							Size = newUDim2(1, 0, 1, 0),
							ZIndex = 100
						})
						
						-- uigridlayout
						utility:create("UIGridLayout", {
							Parent = subColumnsHolder,
							CellPadding = newUDim2(0, 8, 0, 0),
							CellSize = newUDim2(1 / subtab.columns, -8 * (subtab.columns - 1) / subtab.columns, 1, 0),
							FillDirection = Enum.FillDirection.Horizontal,
							SortOrder = Enum.SortOrder.LayoutOrder
						})
						
						-- padding
						utility:create("UIPadding", {
							Parent = subColumnsHolder,
							PaddingTop = newUDim(0, 6),
							PaddingBottom = newUDim(0, 6),
							PaddingLeft = newUDim(0, 6),
							PaddingRight = newUDim(0, 6)
						})
						
						-- создаем колонки для subtab
						for i = 1, subtab.columns do
							local column = utility:create("ScrollingFrame", {
								Name = "Column" .. i,
								Parent = subColumnsHolder,
								Active = true,
								BackgroundColor3 = library.Theme["Background"],
								BackgroundTransparency = 1,
								BorderColor3 = fromRGB(0, 0, 0),
								BorderSizePixel = 0,
								ScrollBarThickness = 2,
								ScrollBarImageColor3 = library.Theme["Accent"],
								CanvasSize = newUDim2(0, 0, 0, 0),
								ZIndex = 101,
								ScrollingDirection = Enum.ScrollingDirection.Y,
								VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
							})
							
							local listLayout = utility:create("UIListLayout", {
								Parent = column,
								Padding = newUDim(0, 8),
								SortOrder = Enum.SortOrder.LayoutOrder
							})
							
							utility:create("UIPadding", {
								Parent = column,
								PaddingTop = newUDim(0, 0),
								PaddingBottom = newUDim(0, 6),
								PaddingLeft = newUDim(0, 0),
								PaddingRight = newUDim(0, 6)
							})
							
							listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
								column.CanvasSize = newUDim2(0, 0, 0, listLayout.AbsoluteContentSize.Y + 6)
							end)
							
							subtab.columnsData[i] = column
						 end
						
						-- index
						subtab.button = subTabButton
						subtab.content = subTabContent
						subtab.columnsHolder = subColumnsHolder
						
						-- button logic
						subTabButton.MouseButton1Click:Connect(function()
							if not subtab.open then
								subtab:Set(true)
							end
						end)
						
						-- hover effects
						subTabButton.MouseEnter:Connect(function()
							if not subtab.open then
								utility:tween(subTabButton, {TextColor3 = library.Theme["Hovered Element"]}, 0.15)
							end
						end)
						
						subTabButton.MouseLeave:Connect(function()
							if not subtab.open then
								utility:tween(subTabButton, {TextColor3 = library.Theme["Text"]}, 0.15)
							end
						end)
					end
					
					do -- // SubTab Functions
						function subtab:Set(state)
							subtab.open = state
							
							-- close other subtabs in same tab
							if state then
								for _, st in pairs(tab.subtabs) do
									if st ~= subtab and st.open then
										st:Set(false)
									end
								end
								tab.currentSubTab = subtab
							end
							
							-- update visibility
							subtab.content.Visible = subtab.open
							
							-- update colors
							if subtab.open then
								utility:tween(subtab.button, {TextColor3 = library.Theme["Accent"]}, 0.2)
							else
								utility:tween(subtab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
							end
						end
						
						function subtab:CreateSection(properties)
							properties = properties or {}
							
							local section = {
								name = properties.Name or "Section",
								side = properties.Side or 1,
								subtab = subtab
							}
							
							do -- // Section UI
								local sectionFrame = utility:create("Frame", {
									Name = "Section",
									Parent = subtab.columnsData[section.side],
									BackgroundColor3 = library.Theme["Inline"],
									BackgroundTransparency = 0,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Size = newUDim2(1, 0, 0, 0),
									AutomaticSize = Enum.AutomaticSize.Y,
									ZIndex = 102
								})
								
								-- section outline
								utility:create("UIStroke", {
									Parent = sectionFrame,
									ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
									Color = library.Theme["Outline"],
									Thickness = 1,
									LineJoinMode = Enum.LineJoinMode.Miter
								})
								
								-- section background
								local sectionBackground = utility:create("Frame", {
									Name = "Background",
									Parent = sectionFrame,
									BackgroundColor3 = library.Theme["Page Background"],
									BackgroundTransparency = 0,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 1, 0, 1),
									Size = newUDim2(1, -2, 1, -2),
									ZIndex = 102
								})
								
								-- section text
								local sectionText = utility:create("TextLabel", {
									Name = "Title",
									Parent = sectionBackground,
									BackgroundTransparency = 1,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 6, 0, 4),
									AutomaticSize = Enum.AutomaticSize.XY,
									FontFace = library.Font,
									Text = section.name,
									TextColor3 = library.Theme["Text"],
									TextSize = 12,
									ZIndex = 103
								})
								
								-- text stroke
								utility:create("UIStroke", {
									Parent = sectionText,
									Color = library.Theme["Text Border"],
									Thickness = 1,
									LineJoinMode = Enum.LineJoinMode.Miter
								})
								
								-- accent line
								local accentLine = utility:create("Frame", {
									Name = "AccentLine",
									Parent = sectionBackground,
									BackgroundColor3 = library.Theme["Accent"],
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Size = newUDim2(1, 0, 0, 2),
									ZIndex = 103
								})
								
								-- elements container
								local elementsContainer = utility:create("Frame", {
									Name = "Elements",
									Parent = sectionBackground,
									BackgroundTransparency = 1,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 0, 0, 20),
									Size = newUDim2(1, 0, 1, -20),
									AutomaticSize = Enum.AutomaticSize.Y,
									ZIndex = 102
								})
								
								-- uilistlayout
								utility:create("UIListLayout", {
									Parent = elementsContainer,
									Padding = newUDim(0, 4),
									HorizontalAlignment = Enum.HorizontalAlignment.Center,
									SortOrder = Enum.SortOrder.LayoutOrder
								})
								
								-- padding
								utility:create("UIPadding", {
									Parent = elementsContainer,
									PaddingTop = newUDim(0, 4),
									PaddingBottom = newUDim(0, 4),
									PaddingLeft = newUDim(0, 4),
									PaddingRight = newUDim(0, 4)
								})
								
								-- index
								section.frame = sectionFrame
								section.background = sectionBackground
								section.container = elementsContainer
								section.text = sectionText
							end
							
							subtab.sections[#subtab.sections + 1] = section
							
							return section
						end
					end
					
					tab.subtabs[#tab.subtabs + 1] = subtab
					
					return subtab
				end
			end
			
			-- CreateSection для Tab (только если нет subtabs)
			function tab:CreateSection(properties)
				if #tab.subtabs > 0 then
					error("Cannot create section in tab with subtabs. Use subtab:CreateSection() instead.")
					return
				end
				
				properties = properties or {}
				
				local section = {
					name = properties.Name or "Section",
					side = properties.Side or 1,
					tab = tab
				}
				
				do -- // Section UI
					local sectionFrame = utility:create("Frame", {
						Name = "Section",
						Parent = tab.columnsData[section.side],
						BackgroundColor3 = library.Theme["Inline"],
						BackgroundTransparency = 0,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 0),
						AutomaticSize = Enum.AutomaticSize.Y,
						ZIndex = 102
					})
					
					-- section outline
					utility:create("UIStroke", {
						Parent = sectionFrame,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- section background
					local sectionBackground = utility:create("Frame", {
						Name = "Background",
						Parent = sectionFrame,
						BackgroundColor3 = library.Theme["Page Background"],
						BackgroundTransparency = 0,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 1, 0, 1),
						Size = newUDim2(1, -2, 1, -2),
						ZIndex = 102
					})
					
					-- section text
					local sectionText = utility:create("TextLabel", {
						Name = "Title",
						Parent = sectionBackground,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 6, 0, 4),
						AutomaticSize = Enum.AutomaticSize.XY,
						FontFace = library.Font,
						Text = section.name,
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						ZIndex = 103
					})
					
					-- text stroke
					utility:create("UIStroke", {
						Parent = sectionText,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- accent line
					local accentLine = utility:create("Frame", {
						Name = "AccentLine",
						Parent = sectionBackground,
						BackgroundColor3 = library.Theme["Accent"],
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 2),
						ZIndex = 103
					})
					
					-- elements container
					local elementsContainer = utility:create("Frame", {
						Name = "Elements",
						Parent = sectionBackground,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 0, 0, 20),
						Size = newUDim2(1, 0, 1, -20),
						AutomaticSize = Enum.AutomaticSize.Y,
						ZIndex = 102
					})
					
					-- uilistlayout
					utility:create("UIListLayout", {
						Parent = elementsContainer,
						Padding = newUDim(0, 4),
						HorizontalAlignment = Enum.HorizontalAlignment.Center,
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					-- padding
					utility:create("UIPadding", {
						Parent = elementsContainer,
						PaddingTop = newUDim(0, 4),
						PaddingBottom = newUDim(0, 4),
						PaddingLeft = newUDim(0, 4),
						PaddingRight = newUDim(0, 4)
					})
					
					-- index
					section.frame = sectionFrame
					section.background = sectionBackground
					section.container = elementsContainer
					section.text = sectionText
				end
				
				tab.sections[#tab.sections + 1] = section
				
				return section
			end
			
			window.tabs[#window.tabs + 1] = tab
			
			return tab
		 end
	end
	
	library.windows[#library.windows + 1] = window
	
	return setmetatable(window, library)
end

-- // Example Usage
do
	-- создаем окно
	local window = library:CreateWindow({
		Name = "typescript",
		Size = UDim2.new(0, 600, 0, 400)
	})
	
	-- создаем вкладки
	local aimbotTab = window:CreateTab({
		Text = "Aimbot"
	})
	
	local visualsTab = window:CreateTab({
		Text = "Visuals"
	})
	
	-- создаем подвкладки для Visuals
	local espSubTab = visualsTab:CreateSubTab({
		Text = "ESP",
		Columns = 3
	})
	
	local worldSubTab = visualsTab:CreateSubTab({
		Text = "World",
		Columns = 2
	})
	
	local miscSubTab = visualsTab:CreateSubTab({
		Text = "Misc",
		Columns = 2
	})
	
	-- создаем секции для подвкладок
	local boxSection = espSubTab:CreateSection({
		Name = "Box ESP",
		Side = 1
	})
	
	local healthSection = espSubTab:CreateSection({
		Name = "Health Bar",
		Side = 1
	})
	
	local chamsSection = espSubTab:CreateSection({
		Name = "Chams",
		Side = 2
	})
	
	local miscTab = window:CreateTab({
		Text = "Misc",
		Columns = 2
	})
	
	-- создаем секцию для таба без подвкладок
	local movementSection = miscTab:CreateSection({
		Name = "Movement",
		Side = 1
	})
	
	local utilitySection = miscTab:CreateSection({
		Name = "Utility",
		Side = 2
	})
	
	local settingsTab = window:CreateTab({
		Text = "Settings",
		Columns = 1
	})
end
