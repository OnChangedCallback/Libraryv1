-- // Variables
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")
local guiService = game:GetService("GuiService")
local coregui = game:GetService("CoreGui")
local httpService = game:GetService("HttpService")

local lp = players.LocalPlayer
local mouse = lp:GetMouse()

-- math
local clamp = math.clamp
local floor = math.floor

-- roblox constructors
local newUDim2 = UDim2.new
local newUDim = UDim.new
local newVector2 = Vector2.new
local newColor3 = Color3.new
local fromRGB = Color3.fromRGB
local fromHSV = Color3.fromHSV
local newColorSequence = ColorSequence.new
local newColorSequenceKeypoint = ColorSequenceKeypoint.new
local newNumberSequence = NumberSequence.new
local newNumberSequenceKeypoint = NumberSequenceKeypoint.new
local newInstance = Instance.new
local newRect = Rect.new

-- // Library
local library = {
	windows = {},
	connections = {},
	flags = {},
	activeSlider = nil,
	
	Theme = {
		["Background"] = fromRGB(20, 15, 15),
		["Inline"] = fromRGB(25, 20, 20),
		["Page Background"] = fromRGB(22, 20, 20),
		["Border"] = fromRGB(10, 10, 10),
		["Outline"] = fromRGB(32, 27, 27),
		["Accent"] = fromRGB(255, 58, 58),
		["Element"] = fromRGB(36, 33, 33),
		["Hovered Element"] = fromRGB(43, 38, 38),
		["Text"] = fromRGB(215, 215, 215),
		["Text Border"] = fromRGB(0, 0, 0)
	},
	
	Folders = {
		Directory = "typescript",
		Assets = "typescript/Assets"
	},
	
	Font = nil
}

library.__index = library

-- // Utility
local utility = {}

do -- // Font Setup
	for _, folderName in library.Folders do
		if not isfolder(folderName) then
			makefolder(folderName)
		end
	end
	
	local fontName = "Windows-XP-Tahoma"
	local fontPath = library.Folders.Assets .. "/" .. fontName
	
	if not isfile(fontPath .. ".json") then
		if not isfile(fontPath .. ".ttf") then
			writefile(fontPath .. ".ttf", game:HttpGet("https://github.com/sametexe001/luas/raw/refs/heads/main/fonts/windows-xp-tahoma.ttf"))
		end
		
		local fontData = {
			name = fontName,
			faces = {{
				name = "Regular",
				weight = 200,
				style = "Regular",
				assetId = getcustomasset(fontPath .. ".ttf")
			}}
		}
		
		writefile(fontPath .. ".json", httpService:JSONEncode(fontData))
	end
	
	library.Font = Font.new(getcustomasset(fontPath .. ".json"))
end

do -- // Utility Functions
	function utility:create(className, properties)
		local instance = newInstance(className)
		
		for property, value in pairs(properties) do
			instance[property] = value
		end
		
		return instance
	end
	
	function utility:tween(object, properties, duration, easingStyle)
		local tweenInfo = TweenInfo.new(
			duration or 0.2,
			easingStyle or Enum.EasingStyle.Quad,
			Enum.EasingDirection.Out
		)
		
		local tween = tweenService:Create(object, tweenInfo, properties)
		tween:Play()
		
		return tween
	end
	
	function utility:draggify(frame)
		local dragging = false
		local dragStart = nil
		local startPos = nil
		
		frame.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = true
				dragStart = input.Position
				startPos = frame.Position
			end
		end)
		
		frame.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = false
			end
		end)
		
		uis.InputChanged:Connect(function(input)
			if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
				local delta = input.Position - dragStart
				frame.Position = newUDim2(
					startPos.X.Scale,
					startPos.X.Offset + delta.X,
					startPos.Y.Scale,
					startPos.Y.Offset + delta.Y
				)
			end
		end)
	end
end

-- // Library Functions
function library:CreateWindow(properties)
	properties = properties or {}
	
	local window = {
		name = properties.Name or "Window",
		size = properties.Size or newUDim2(0, 600, 0, 400),
		tabs = {},
		currentTab = nil,
		screenGui = nil
	}
	
	do -- // Window UI
		-- screengui
		local screenGui = utility:create("ScreenGui", {
			Name = "MainScreenGUI",
			Parent = coregui,
			ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		})
		
		window.screenGui = screenGui
		
		-- mainframe
		local mainFrame = utility:create("Frame", {
			Name = "MainFrame",
			Parent = screenGui,
			BackgroundColor3 = library.Theme["Background"],
			BorderColor3 = library.Theme["Border"],
			BorderSizePixel = 0,
			Position = newUDim2(0.257073551, 0, 0.152512997, 0),
			Size = window.size,
			ZIndex = 99
		})
		
		-- mainframe stroke
		utility:create("UIStroke", {
			Parent = mainFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- top accent line
		local topAccentLine = utility:create("Frame", {
			Name = "TopAccentLine",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Accent"],
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(0, window.size.X.Offset, 0, 2),
			ZIndex = 100
		})
		
		-- uistroke for accent line
		utility:create("UIStroke", {
			Parent = topAccentLine,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- inline frame (внутренняя рамка)
		local inlineFrame = utility:create("Frame", {
			Name = "InlineFrame",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Inline"],
			BorderColor3 = library.Theme["Outline"],
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 0, 20),
			Size = newUDim2(1, -14, 1, -27),
			ZIndex = 99
		})
		
		-- inline stroke
		utility:create("UIStroke", {
			Parent = inlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Outline"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- inner border stroke
		utility:create("UIStroke", {
			Parent = inlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- tabs holder
		local tabsHolder = utility:create("Frame", {
			Name = "TabsHolder",
			Parent = inlineFrame,
			BackgroundColor3 = library.Theme["Inline"],
			BackgroundTransparency = 1,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 0, 7),
			Size = newUDim2(1, -14, 0, 15),
			ZIndex = 100
		})
		
		-- list layout
		local listLayout = utility:create("UIListLayout", {
			Parent = tabsHolder,
			FillDirection = Enum.FillDirection.Horizontal,
			SortOrder = Enum.SortOrder.LayoutOrder
		})
		
		-- menu name holder
		local menuNameHolder = utility:create("Frame", {
			Name = "MenuNameHolder",
			Parent = inlineFrame,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 0.990,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 1, -22),
			Size = newUDim2(1, -14, 0, 15),
			ZIndex = 100
		})
		
		-- name text
		local nameText = utility:create("TextLabel", {
			Name = "NameText",
			Parent = menuNameHolder,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 1.000,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(1, 0, 1, 0),
			FontFace = library.Font,
			Text = window.name,
			TextColor3 = library.Theme["Text"],
			TextSize = 12
		})
		
		-- text stroke
		utility:create("UIStroke", {
			Parent = nameText,
			Color = library.Theme["Text Border"],
			Thickness = 1
		})
		
		-- subtabs main frame (справа от mainFrame)
		local subTabsMainFrame = utility:create("Frame", {
			Name = "SubTabsMainFrame",
			Parent = mainFrame,
			BackgroundColor3 = library.Theme["Background"],
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme["Border"],
			BorderSizePixel = 0,
			Position = newUDim2(1, 7, 0, 0),
			Size = newUDim2(0, 50, 1, 0),
			Visible = false,
			ZIndex = 100
		})
		
		-- subtabs main frame stroke
		utility:create("UIStroke", {
			Parent = subTabsMainFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- top accent line for subtabs
		local subTabsAccentLine = utility:create("Frame", {
			Name = "TopAccentLine",
			Parent = subTabsMainFrame,
			BackgroundColor3 = library.Theme["Accent"],
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Size = newUDim2(1, 0, 0, 2),
			ZIndex = 101
		})
		
		-- uistroke for subtabs accent line
		utility:create("UIStroke", {
			Parent = subTabsAccentLine,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- subtabs inline frame
		local subTabsInlineFrame = utility:create("Frame", {
			Name = "SubTabsInlineFrame",
			Parent = subTabsMainFrame,
			BackgroundColor3 = library.Theme["Inline"],
			BorderColor3 = library.Theme["Outline"],
			BorderSizePixel = 0,
			Position = newUDim2(0, 7, 0, 20),
			Size = newUDim2(1, -14, 1, -27),
			ZIndex = 101
		})
		
		-- subtabs inline stroke
		utility:create("UIStroke", {
			Parent = subTabsInlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Outline"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- subtabs inner border stroke
		utility:create("UIStroke", {
			Parent = subTabsInlineFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = library.Theme["Border"],
			Thickness = 1,
			LineJoinMode = Enum.LineJoinMode.Miter
		})
		
		-- subtabs holder (прозрачный контейнер, выровнен с tabs)
		local subTabsHolder = utility:create("Frame", {
			Name = "SubTabsHolder",
			Parent = subTabsInlineFrame,
			BackgroundColor3 = fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			BorderColor3 = fromRGB(0, 0, 0),
			BorderSizePixel = 0,
			Position = newUDim2(0, 0, 0, 0),
			Size = newUDim2(1, 0, 1, 0),
			ZIndex = 102
		})
		
		-- subtabs list layout (вертикальный)
		utility:create("UIListLayout", {
			Parent = subTabsHolder,
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = newUDim(0, 0),
			HorizontalAlignment = Enum.HorizontalAlignment.Center
		})
		
		-- index
		window.gui = screenGui
		window.frame = mainFrame
		window.inlineFrame = inlineFrame
		window.tabsHolder = tabsHolder
		window.subTabsMainFrame = subTabsMainFrame
		window.subTabsHolder = subTabsHolder
		window.nameText = nameText
		
		-- draggable
		utility:draggify(mainFrame)
	end
	
	do -- // Window Functions
		function window:SetTab(tab)
			for _, t in pairs(window.tabs) do
				if t.open and t ~= tab then
					t:Set(false)
				end
			end
			
			window.currentTab = tab
			
			-- show/hide subtabs holder
			if tab and #tab.subtabs > 0 then
				window.subTabsMainFrame.Visible = true
				
				-- hide all subtabs first
				for _, t in pairs(window.tabs) do
					for _, subtab in pairs(t.subtabs) do
						subtab.button.Visible = false
					end
				end
				
				-- show current tab subtabs
				for _, subtab in pairs(tab.subtabs) do
					subtab.button.Visible = true
				end
				
				-- open first subtab if none open
				local hasOpenSubTab = false
				for _, subtab in pairs(tab.subtabs) do
					if subtab.open then
						hasOpenSubTab = true
						break
					end
				end
				
				if not hasOpenSubTab and #tab.subtabs > 0 then
					tab.subtabs[1]:Set(true)
				end
			else
				window.subTabsMainFrame.Visible = false
			end
		end
		
		function window:CreateTab(properties)
			properties = properties or {}
			
			local tab = {
				text = properties.Text or "Tab",
				open = false,
				window = window,
				subtabs = {},
				currentSubTab = nil,
				columns = properties.Columns or 2,
				columnsData = {},
				sections = {}
			}
			
			do -- // Tab UI
				-- tab button
				local tabButton = utility:create("TextButton", {
					Name = "TAB",
					Parent = window.tabsHolder,
					BackgroundColor3 = library.Theme["Background"],
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Size = newUDim2(0, 50, 0, 15),
					FontFace = library.Font,
					Text = tab.text,
					TextColor3 = library.Theme["Text"],
					TextSize = 12,
					TextWrapped = true
				})
				
				-- button outline
				utility:create("UIStroke", {
					Parent = tabButton,
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					Color = library.Theme["Outline"],
					Thickness = 1,
					LineJoinMode = Enum.LineJoinMode.Miter,
					Transparency = 0.3
				})
				
				-- text stroke
				utility:create("UIStroke", {
					Parent = tabButton,
					Color = library.Theme["Text Border"],
					Thickness = 1
				})
				
				-- tab content frame (сдвигаем вправо если есть подвкладки)
				local tabContent = utility:create("Frame", {
					Name = "TabContent",
					Parent = window.inlineFrame,
					BackgroundColor3 = library.Theme["Inline"],
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = newUDim2(0, 7, 0, 29),
					Size = newUDim2(1, -14, 1, -51),
					Visible = false,
					ZIndex = 100
				})
				
				-- columns holder (невидимый контейнер для колонок)
				local columnsHolder = utility:create("Frame", {
					Name = "ColumnsHolder",
					Parent = tabContent,
					BackgroundColor3 = fromRGB(255, 255, 255),
					BackgroundTransparency = 1,
					BorderColor3 = fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = newUDim2(0, 0, 0, 0),
					Size = newUDim2(1, 0, 1, 0),
					ZIndex = 100
				})
				
				-- uigridlayout для колонок
				utility:create("UIGridLayout", {
					Parent = columnsHolder,
					CellPadding = newUDim2(0, 8, 0, 0),
					CellSize = newUDim2(1 / tab.columns, -8 * (tab.columns - 1) / tab.columns, 1, 0),
					FillDirection = Enum.FillDirection.Horizontal,
					SortOrder = Enum.SortOrder.LayoutOrder
				})
				
				-- padding для columns holder
				utility:create("UIPadding", {
					Parent = columnsHolder,
					PaddingTop = newUDim(0, 6),
					PaddingBottom = newUDim(0, 6),
					PaddingLeft = newUDim(0, 6),
					PaddingRight = newUDim(0, 6)
				})
				
				-- создаем колонки
				for i = 1, tab.columns do
					local column = utility:create("ScrollingFrame", {
						Name = "Column" .. i,
						Parent = columnsHolder,
						Active = true,
						BackgroundColor3 = library.Theme["Background"],
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						ScrollBarThickness = 2,
						ScrollBarImageColor3 = library.Theme["Accent"],
						CanvasSize = newUDim2(0, 0, 0, 0),
						ZIndex = 101,
						ScrollingDirection = Enum.ScrollingDirection.Y,
						VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
					})
					
					-- uilistlayout для секций в колонке
					local listLayout = utility:create("UIListLayout", {
						Parent = column,
						Padding = newUDim(0, 8),
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					-- padding для колонки
					utility:create("UIPadding", {
						Parent = column,
						PaddingTop = newUDim(0, 0),
						PaddingBottom = newUDim(0, 6),
						PaddingLeft = newUDim(0, 0),
						PaddingRight = newUDim(0, 6)
					})
					
					-- авторазмер canvas
					listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
						column.CanvasSize = newUDim2(0, 0, 0, listLayout.AbsoluteContentSize.Y + 6)
					end)
					
					tab.columnsData[i] = column
				end
				
				-- index
				tab.button = tabButton
				tab.content = tabContent
				tab.columnsHolder = columnsHolder
				
				-- button logic
				tabButton.MouseButton1Click:Connect(function()
					if not tab.open then
						tab:Set(true)
					end
				end)
				
				-- hover effects
				tabButton.MouseEnter:Connect(function()
					if not tab.open then
						utility:tween(tabButton, {TextColor3 = library.Theme["Hovered Element"]}, 0.15)
					end
				end)
				
				tabButton.MouseLeave:Connect(function()
					if not tab.open then
						utility:tween(tabButton, {TextColor3 = library.Theme["Text"]}, 0.15)
					end
				end)
			end
			
			do -- // Tab Functions
				function tab:Set(state)
					if state then
						-- закрываем все другие табы
						for _, otherTab in pairs(window.tabs) do
							if otherTab ~= tab and otherTab.open then
								otherTab.open = false
								otherTab.content.Visible = false
								utility:tween(otherTab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
								
								-- закрываем все подвкладки другого таба
								for _, subtab in pairs(otherTab.subtabs) do
									if subtab.content then
										subtab.content.Visible = false
									end
								end
							end
						end
						
						-- открываем текущий таб
						tab.open = true
						tab.content.Visible = true
						utility:tween(tab.button, {TextColor3 = library.Theme["Accent"]}, 0.2)
						window:SetTab(tab)
						
						-- если есть подвкладки, открываем первую открытую или первую по списку
						if #tab.subtabs > 0 then
							local hasOpenSubTab = false
							for _, subtab in pairs(tab.subtabs) do
								if subtab.open then
									subtab.content.Visible = true
									hasOpenSubTab = true
									break
								end
							end
							
							if not hasOpenSubTab and #tab.subtabs > 0 then
								tab.subtabs[1]:Set(true)
							end
						end
					else
						-- закрываем текущий таб
						tab.open = false
						tab.content.Visible = false
						utility:tween(tab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
						
						-- закрываем все подвкладки
						for _, subtab in pairs(tab.subtabs) do
							if subtab.content then
								subtab.content.Visible = false
							end
						end
					end
				end
			end
			
			-- auto open first tab
			if #window.tabs == 0 then
				tab:Set(true)
			end
			
			do -- // SubTab Functions
				function tab:CreateSubTab(properties)
					properties = properties or {}
					
					local subtab = {
						text = properties.Text or "SubTab",
						open = false,
						tab = tab,
						window = window,
						columns = properties.Columns or 2,
						columnsData = {},
						sections = {}
					}
					
					do -- // SubTab UI
						-- subtab button
						local subTabButton = utility:create("TextButton", {
							Name = "SUBTAB",
							Parent = window.subTabsHolder,
							BackgroundColor3 = library.Theme["Background"],
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(0, 50, 0, 15),
							FontFace = library.Font,
							Text = subtab.text,
							TextColor3 = library.Theme["Text"],
							TextSize = 12,
							TextWrapped = true,
							Visible = false,
							ZIndex = 102
						})
						
						-- text stroke
						utility:create("UIStroke", {
							Parent = subTabButton,
							Color = library.Theme["Text Border"],
							Thickness = 1
						})
						
						-- subtab content frame
						local subTabContent = utility:create("Frame", {
							Name = "SubTabContent",
							Parent = window.inlineFrame,
							BackgroundColor3 = library.Theme["Inline"],
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 7, 0, 29),
							Size = newUDim2(1, -14, 1, -51),
							Visible = false,
							ZIndex = 100
						})
						
						-- columns holder для subtab
						local subColumnsHolder = utility:create("Frame", {
							Name = "ColumnsHolder",
							Parent = subTabContent,
							BackgroundColor3 = fromRGB(255, 255, 255),
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 0, 0, 0),
							Size = newUDim2(1, 0, 1, 0),
							ZIndex = 100
						})
						
						-- uigridlayout
						utility:create("UIGridLayout", {
							Parent = subColumnsHolder,
							CellPadding = newUDim2(0, 8, 0, 0),
							CellSize = newUDim2(1 / subtab.columns, -8 * (subtab.columns - 1) / subtab.columns, 1, 0),
							FillDirection = Enum.FillDirection.Horizontal,
							SortOrder = Enum.SortOrder.LayoutOrder
						})
						
						-- padding
						utility:create("UIPadding", {
							Parent = subColumnsHolder,
							PaddingTop = newUDim(0, 6),
							PaddingBottom = newUDim(0, 6),
							PaddingLeft = newUDim(0, 6),
							PaddingRight = newUDim(0, 6)
						})
						
						-- создаем колонки для subtab
						for i = 1, subtab.columns do
							local column = utility:create("ScrollingFrame", {
								Name = "Column" .. i,
								Parent = subColumnsHolder,
								Active = true,
								BackgroundColor3 = library.Theme["Background"],
								BackgroundTransparency = 1,
								BorderColor3 = fromRGB(0, 0, 0),
								BorderSizePixel = 0,
								ScrollBarThickness = 2,
								ScrollBarImageColor3 = library.Theme["Accent"],
								CanvasSize = newUDim2(0, 0, 0, 0),
								ZIndex = 101,
								ScrollingDirection = Enum.ScrollingDirection.Y,
								VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
							})
							
							local listLayout = utility:create("UIListLayout", {
								Parent = column,
								Padding = newUDim(0, 8),
								SortOrder = Enum.SortOrder.LayoutOrder
							})
							
							utility:create("UIPadding", {
								Parent = column,
								PaddingTop = newUDim(0, 0),
								PaddingBottom = newUDim(0, 6),
								PaddingLeft = newUDim(0, 0),
								PaddingRight = newUDim(0, 6)
							})
							
							listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
								column.CanvasSize = newUDim2(0, 0, 0, listLayout.AbsoluteContentSize.Y + 6)
							end)
							
							subtab.columnsData[i] = column
						 end
						
						-- index
						subtab.button = subTabButton
						subtab.content = subTabContent
						subtab.columnsHolder = subColumnsHolder
						
						-- button logic
						subTabButton.MouseButton1Click:Connect(function()
							if not subtab.open then
								subtab:Set(true)
							end
						end)
						
						-- hover effects
						subTabButton.MouseEnter:Connect(function()
							if not subtab.open then
								utility:tween(subTabButton, {TextColor3 = library.Theme["Hovered Element"]}, 0.15)
							end
						end)
						
						subTabButton.MouseLeave:Connect(function()
							if not subtab.open then
								utility:tween(subTabButton, {TextColor3 = library.Theme["Text"]}, 0.15)
							end
						end)
					end
					
					do -- // SubTab Functions
						function subtab:Set(state)
							subtab.open = state
							
							-- close other subtabs in same tab
							if state then
								for _, st in pairs(tab.subtabs) do
									if st ~= subtab and st.open then
										st:Set(false)
									end
								end
								tab.currentSubTab = subtab
							end
							
							-- update visibility
							subtab.content.Visible = subtab.open
							
							-- update colors
							if subtab.open then
								utility:tween(subtab.button, {TextColor3 = library.Theme["Accent"]}, 0.2)
							else
								utility:tween(subtab.button, {TextColor3 = library.Theme["Text"]}, 0.2)
							end
						end
						
						function subtab:CreateSection(properties)
							properties = properties or {}
							
							local section = {
								name = properties.Name or "Section",
								side = properties.Side or 1,
								subtab = subtab,
								window = subtab.tab.window
							}
							
							do -- // Section UI
								local sectionFrame = utility:create("Frame", {
									Name = "Section",
									Parent = subtab.columnsData[section.side],
									BackgroundColor3 = library.Theme["Inline"],
									BackgroundTransparency = 0,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Size = newUDim2(1, 0, 0, 0),
									AutomaticSize = Enum.AutomaticSize.Y,
									ZIndex = 102
								})
								
								-- section outline
								utility:create("UIStroke", {
									Parent = sectionFrame,
									ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
									Color = library.Theme["Outline"],
									Thickness = 1,
									LineJoinMode = Enum.LineJoinMode.Miter
								})
								
								-- section background
								local sectionBackground = utility:create("Frame", {
									Name = "Background",
									Parent = sectionFrame,
									BackgroundColor3 = library.Theme["Page Background"],
									BackgroundTransparency = 0,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 1, 0, 1),
									Size = newUDim2(1, -2, 1, -2),
									ZIndex = 102
								})
								
								-- section text
								local sectionText = utility:create("TextLabel", {
									Name = "Title",
									Parent = sectionBackground,
									BackgroundTransparency = 1,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 6, 0, 4),
									AutomaticSize = Enum.AutomaticSize.XY,
									FontFace = library.Font,
									Text = section.name,
									TextColor3 = library.Theme["Text"],
									TextSize = 12,
									ZIndex = 103
								})
								
								-- text stroke
								utility:create("UIStroke", {
									Parent = sectionText,
									Color = library.Theme["Text Border"],
									Thickness = 1,
									LineJoinMode = Enum.LineJoinMode.Miter
								})
								
								-- accent line
								local accentLine = utility:create("Frame", {
									Name = "AccentLine",
									Parent = sectionBackground,
									BackgroundColor3 = library.Theme["Accent"],
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Size = newUDim2(1, 0, 0, 2),
									ZIndex = 103
								})
								
								-- elements container
								local elementsContainer = utility:create("Frame", {
									Name = "Elements",
									Parent = sectionBackground,
									BackgroundTransparency = 1,
									BorderColor3 = fromRGB(0, 0, 0),
									BorderSizePixel = 0,
									Position = newUDim2(0, 0, 0, 20),
									Size = newUDim2(1, 0, 1, -20),
									AutomaticSize = Enum.AutomaticSize.Y,
									ZIndex = 102
								})
								
								-- uilistlayout
								utility:create("UIListLayout", {
									Parent = elementsContainer,
									Padding = newUDim(0, 4),
									HorizontalAlignment = Enum.HorizontalAlignment.Center,
									SortOrder = Enum.SortOrder.LayoutOrder
								})
								
								-- padding
								utility:create("UIPadding", {
									Parent = elementsContainer,
									PaddingTop = newUDim(0, 4),
									PaddingBottom = newUDim(0, 4),
									PaddingLeft = newUDim(0, 4),
									PaddingRight = newUDim(0, 4)
								})
								
								-- index
								section.frame = sectionFrame
								section.background = sectionBackground
								section.container = elementsContainer
								section.text = sectionText
							end
							
							subtab.sections[#subtab.sections + 1] = section
							
							-- AddToggle для секции
							function section:AddToggle(properties)
								properties = properties or {}
								
								local toggle = {
									name = properties.Name or "Toggle",
									flag = properties.Flag or properties.Name or "Toggle",
									value = properties.Default or false,
									callback = properties.Callback or function() end,
									section = section
								}
								
								local toggleButton, indicator, toggleText
								
								do -- // Toggle UI
									-- toggle button (прозрачная кнопка на всю ширину)
									toggleButton = utility:create("TextButton", {
										Name = "Toggle",
										Parent = section.container,
										BackgroundColor3 = library.Theme["Background"],
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(1, 0, 0, 15),
										AutoButtonColor = false,
										Text = "",
										ZIndex = 103
									})
									
									-- indicator (квадрат 10x10)
									indicator = utility:create("Frame", {
										Name = "Indicator",
										Parent = toggleButton,
										BackgroundColor3 = library.Theme["Element"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										AnchorPoint = newVector2(0, 0.5),
										Position = newUDim2(0, 0, 0.5, 0),
										Size = newUDim2(0, 10, 0, 10),
										ZIndex = 104
									})
									
									-- indicator outline
									utility:create("UIStroke", {
										Parent = indicator,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- indicator gradient
									utility:create("UIGradient", {
										Parent = indicator,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
											newColorSequenceKeypoint(1, fromRGB(127, 127, 127))
										})
									})
									
									-- toggle text
									toggleText = utility:create("TextLabel", {
										Name = "Text",
										Parent = toggleButton,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 18, 0, -1),
										Size = newUDim2(1, -18, 1, 0),
										FontFace = library.Font,
										Text = toggle.name,
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										ZIndex = 104
									})
									
									-- right holder для colorpicker/keybind элементов
									local rightHolder = utility:create("Frame", {
										Name = "RightHolder",
										Parent = toggleButton,
										BackgroundTransparency = 1,
										AnchorPoint = newVector2(1, 0.5),
										Position = newUDim2(1, -2, 0.5, 0),
										Size = newUDim2(0, 0, 0, 12),
										ZIndex = 104
									})
									
									utility:create("UIListLayout", {
										Parent = rightHolder,
										FillDirection = Enum.FillDirection.Horizontal,
										HorizontalAlignment = Enum.HorizontalAlignment.Right,
										VerticalAlignment = Enum.VerticalAlignment.Center,
										Padding = newUDim(0, 4),
										SortOrder = Enum.SortOrder.LayoutOrder
									})
									
									-- index
									toggle.button = toggleButton
									toggle.indicator = indicator
									toggle.text = toggleText
									toggle.holder = toggleButton
									toggle.rightHolder = rightHolder
								end
								
								do -- // Toggle Functions
									function toggle:Set(value)
										toggle.value = value
										library.flags[toggle.flag] = toggle.value
										
										if toggle.value then
											-- включен - красный акцент
											utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Accent"]}, 0.2)
											utility:tween(toggle.text, {TextColor3 = library.Theme["Accent"]}, 0.2)
										else
											-- выключен - серый
											utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
											utility:tween(toggle.text, {TextColor3 = library.Theme["Text"]}, 0.2)
										end
										
										-- callback
										toggle.callback(toggle.value)
									end
									
									function toggle:Get()
										return toggle.value
									end
								end
								
								-- click event (оптимизировано - MouseButton1Click вместо MouseButton1Down)
							library.connections[#library.connections + 1] = toggleButton.MouseButton1Click:Connect(function()
								toggle:Set(not toggle.value)
							end)
								
								-- set default
								if properties.Default then
									toggle:Set(properties.Default)
								end
								
								-- AddColorpicker для toggle
								function toggle:AddColorpicker(properties)
									properties = properties or {}
									
									local colorpicker = {
										name = properties.Name or "Color",
										flag = properties.Flag or toggle.flag .. "_Color",
										default = properties.Default or fromRGB(255, 255, 255),
										alpha = properties.Alpha or 1,
										callback = properties.Callback or function() end,
										
										-- HSV значения
										hue = 0,
										saturation = 1,
										value = 1,
										
										-- состояние
										isOpen = false,
										color = fromRGB(255, 255, 255)
									}
									
									local colorButton, colorButtonFrame
									
									do -- // Colorpicker UI
										-- outline (внешняя рамка)
										colorButton = utility:create("TextButton", {
											Name = "ColorButton",
											Parent = toggle.rightHolder,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Size = newUDim2(0, 24, 0, 10),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 105
										})
										
										utility:create("UIStroke", {
											Parent = colorButton,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- inline (средняя рамка)
										local colorInline = utility:create("Frame", {
											Name = "Inline",
											Parent = colorButton,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 105
										})
										
										-- handler (внутренний контейнер)
										local colorHandler = utility:create("Frame", {
											Name = "Handler",
											Parent = colorInline,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 105
										})
										
										-- клеточки для показа прозрачности
										utility:create("ImageLabel", {
											Parent = colorHandler,
											Image = "rbxassetid://18274452449",
											ScaleType = Enum.ScaleType.Tile,
											TileSize = newUDim2(0, 4, 0, 4),
											BackgroundTransparency = 1,
											Size = newUDim2(1, 0, 1, 0),
											ZIndex = 105
										})
										
										-- цветной слой поверх клеточек
										colorButtonFrame = utility:create("Frame", {
											Parent = colorHandler,
											BackgroundColor3 = colorpicker.default,
											BackgroundTransparency = 1 - colorpicker.alpha,
											BorderSizePixel = 0,
											Size = newUDim2(1, 0, 1, 0),
											ZIndex = 106
										})
										
										colorpicker.button = colorButton
										colorpicker.colorFrame = colorButtonFrame
									end
									
									do -- // Colorpicker Functions
										function colorpicker:Set(color, alpha)
											colorpicker.color = color or fromRGB(255, 255, 255)
											colorpicker.alpha = alpha or 1
											
											-- обновляем цвет и прозрачность
											utility:tween(colorpicker.colorFrame, {
												BackgroundColor3 = colorpicker.color,
												BackgroundTransparency = 1 - colorpicker.alpha
											}, 0.2)
											
											-- сохраняем в флаги
											library.flags[colorpicker.flag] = {
												Color = colorpicker.color,
												Alpha = colorpicker.alpha,
												HexValue = "#" .. colorpicker.color:ToHex()
											}
											
											-- callback
											colorpicker.callback(colorpicker.color, colorpicker.alpha)
										end
										
										function colorpicker:Get()
											return colorpicker.color, colorpicker.alpha
										end
									end
									
									-- создаем окно colorpicker
									local colorpickerWindow, paletteFrame, palettePicker, hueFrame, huePicker
									
									do -- // Colorpicker Window
										colorpickerWindow = utility:create("TextButton", {
											Name = "ColorpickerWindow",
											Parent = toggle.section.window.screenGui,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 0, 0, 0),
											Size = newUDim2(0, 179, 0, 268),
											Visible = false,
											ZIndex = 200,
											AutoButtonColor = false,
											Text = ""
										})
										
										local windowInline = utility:create("Frame", {
											Parent = colorpickerWindow,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 200
										})
										
										local windowBackground = utility:create("Frame", {
											Parent = windowInline,
											BackgroundColor3 = library.Theme["Background"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 200
										})
										
										-- заголовок colorpicker
										local titleLabel = utility:create("TextLabel", {
											Parent = windowBackground,
											BackgroundTransparency = 1,
											Position = newUDim2(0, 3, 0, 0),
											Size = newUDim2(0, 0, 0, 16),
											FontFace = library.Font,
											Text = colorpicker.name,
											TextColor3 = library.Theme["Text"],
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											ZIndex = 202,
											AutomaticSize = Enum.AutomaticSize.XY
										})
										
										utility:create("UIStroke", {
											Parent = titleLabel,
											Color = library.Theme["Text Border"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- outline
										utility:create("UIStroke", {
											Parent = colorpickerWindow,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- тень для окна (не перехватывает клики)
										local shadowFrame = utility:create("ImageLabel", {
											Name = "Shadow",
											Parent = colorpickerWindow,
											Image = "rbxassetid://5554236805",
											ImageColor3 = library.Theme["Border"],
											ImageTransparency = 0.5,
											ScaleType = Enum.ScaleType.Slice,
											SliceCenter = newRect(23, 23, 277, 277),
											AnchorPoint = newVector2(0.5, 0.5),
											Position = newUDim2(0.5, 0, 0.5, 0),
											Size = newUDim2(1, 20, 1, 20),
											ZIndex = 199,
											BackgroundTransparency = 1
										})
										
										
										-- палитра saturation/value
										local paletteContainer = utility:create("TextButton", {
											Name = "SatValHolder",
											Parent = windowBackground,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 3, 0, 16),
											Size = newUDim2(1, -21, 1, -76),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 201
										})
										
										local paletteInline = utility:create("Frame", {
											Parent = paletteContainer,
											BackgroundColor3 = library.Theme["Inline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										paletteFrame = utility:create("Frame", {
											Name = "SatValBackground",
											Parent = paletteInline,
											BackgroundColor3 = fromRGB(255, 0, 0), -- будет меняться по hue
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										-- outline для палитры
										utility:create("UIStroke", {
											Parent = paletteFrame,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- saturation gradient (белый -> прозрачный)
										local saturationFrame = utility:create("Frame", {
											Name = "Saturation",
											Parent = paletteFrame,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											Size = newUDim2(1, 0, 1, 0),
											ZIndex = 204
										})
										
										utility:create("UIGradient", {
											Parent = saturationFrame,
											Rotation = 0,
											Transparency = newNumberSequence({
												newNumberSequenceKeypoint(0, 0),
												newNumberSequenceKeypoint(1, 1)
											})
										})
										
										-- value gradient (прозрачный -> черный)
										local valueFrame = utility:create("Frame", {
											Name = "Value",
											Parent = paletteFrame,
											BackgroundColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Size = newUDim2(1, 0, 1, 0),
											ZIndex = 205
										})
										
										utility:create("UIGradient", {
											Parent = valueFrame,
											Rotation = 90,
											Transparency = newNumberSequence({
												newNumberSequenceKeypoint(0, 1),
												newNumberSequenceKeypoint(1, 0)
											})
										})
										
										-- picker для палитры
										palettePicker = utility:create("Frame", {
											Name = "Picker",
											Parent = paletteFrame,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Position = newUDim2(1, -1, 0, -1),
											Size = newUDim2(0, 2, 0, 2),
											ZIndex = 206
										})
										
										utility:create("UIStroke", {
											Parent = palettePicker,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- hue slider (горизонтальный внизу)
										local hueContainer = utility:create("TextButton", {
											Name = "HueHolder",
											Parent = windowBackground,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 3, 1, -59),
											Size = newUDim2(1, -6, 0, 14),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 201
										})
										
										local hueInline = utility:create("Frame", {
											Parent = hueContainer,
											BackgroundColor3 = library.Theme["Inline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										hueFrame = utility:create("Frame", {
											Name = "HueBackground",
											Parent = hueInline,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										-- outline для hue
										utility:create("UIStroke", {
											Parent = hueFrame,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- hue gradient (радуга горизонтальная)
										utility:create("UIGradient", {
											Parent = hueFrame,
											Rotation = 0,
											Color = newColorSequence({
												newColorSequenceKeypoint(0, fromRGB(255, 0, 0)),
												newColorSequenceKeypoint(0.17, fromRGB(255, 255, 0)),
												newColorSequenceKeypoint(0.33, fromRGB(0, 255, 0)),
												newColorSequenceKeypoint(0.5, fromRGB(0, 255, 255)),
												newColorSequenceKeypoint(0.67, fromRGB(0, 0, 255)),
												newColorSequenceKeypoint(0.83, fromRGB(255, 0, 255)),
												newColorSequenceKeypoint(1, fromRGB(255, 0, 0))
											})
										})
										
										-- hue picker holder
										local huePickerHolder = utility:create("Frame", {
											Parent = hueFrame,
											BackgroundTransparency = 1,
											Position = newUDim2(0, 2, 0, 0),
											Size = newUDim2(1, -4, 1, 0),
											ZIndex = 202
										})
										
										-- hue picker
										huePicker = utility:create("Frame", {
											Name = "HuePicker",
											Parent = huePickerHolder,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BackgroundTransparency = 0.25,
											BorderColor3 = fromRGB(12, 12, 12),
											BorderSizePixel = 0,
											AnchorPoint = newVector2(1, 0),
											Position = newUDim2(1, 1, 0, 1),
											Size = newUDim2(0, 2, 1, -2),
											ZIndex = 204
										})
										
										utility:create("UIStroke", {
											Parent = huePicker,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- контейнер для textbox'ов вверху
										local textboxContainer = utility:create("Frame", {
											Parent = windowBackground,
											BackgroundTransparency = 1,
											Position = newUDim2(0, 3, 1, -42),
											Size = newUDim2(1, -6, 0, 18),
											ZIndex = 201
										})
										
										utility:create("UIListLayout", {
											Parent = textboxContainer,
											FillDirection = Enum.FillDirection.Horizontal,
											HorizontalAlignment = Enum.HorizontalAlignment.Left,
											Padding = newUDim(0, 2),
											SortOrder = Enum.SortOrder.LayoutOrder
										})
										
										-- alpha/fade слайдер справа от палитры
										local alphaContainer = utility:create("TextButton", {
											Name = "AlphaHolder",
											Parent = windowBackground,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											AnchorPoint = newVector2(1, 0),
											Position = newUDim2(1, -3, 0, 16),
											Size = newUDim2(0, 14, 1, -76),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 201
										})
										
										local alphaInline = utility:create("Frame", {
											Parent = alphaContainer,
											BackgroundColor3 = library.Theme["Inline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										local alphaBackground = utility:create("Frame", {
											Name = "AlphaBackground",
											Parent = alphaInline,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										-- клеточки под alpha
										utility:create("ImageLabel", {
											Parent = alphaBackground,
											Image = "rbxassetid://18274452449",
											ScaleType = Enum.ScaleType.Tile,
											TileSize = newUDim2(0, 4, 0, 4),
											BackgroundTransparency = 1,
											Size = newUDim2(1, 0, 1, 0),
											ZIndex = 202
										})
										
										-- цветной слой поверх клеточек
										local alphaColorFrame = utility:create("Frame", {
											Parent = alphaBackground,
											BackgroundColor3 = colorpicker.color,
											BorderSizePixel = 0,
											Size = newUDim2(1, 0, 1, 0),
											ZIndex = 203
										})
										
										-- alpha gradient поверх цвета
										utility:create("UIGradient", {
											Parent = alphaColorFrame,
											Rotation = 90,
											Transparency = newNumberSequence({
												newNumberSequenceKeypoint(0, 1),
												newNumberSequenceKeypoint(1, 0)
											})
										})
										
										-- alpha picker
										local alphaPicker = utility:create("Frame", {
											Name = "AlphaPicker",
											Parent = alphaBackground,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BackgroundTransparency = 0.25,
											BorderColor3 = fromRGB(12, 12, 12),
											BorderSizePixel = 0,
											AnchorPoint = newVector2(0, 1),
											Position = newUDim2(0, 1, colorpicker.alpha, 1),
											Size = newUDim2(1, -2, 0, 2),
											ZIndex = 204
										})
										
										utility:create("UIStroke", {
											Parent = alphaPicker,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										-- RGB textbox container
										local rgbContainer = utility:create("Frame", {
											Name = "RGBContainer",
											Parent = textboxContainer,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Size = newUDim2(0, 85, 1, 0),
											ZIndex = 201,
											LayoutOrder = 1
										})
										
										local rgbInline = utility:create("Frame", {
											Parent = rgbContainer,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										local rgbInlineInline = utility:create("Frame", {
											Parent = rgbInline,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										local rgbBackground = utility:create("Frame", {
											Parent = rgbInlineInline,
											BackgroundColor3 = library.Theme["Element"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201,
											ClipsDescendants = true
										})
										
										-- градиент для background
										utility:create("UIGradient", {
											Parent = rgbBackground,
											Rotation = 90,
											Color = newColorSequence({
												newColorSequenceKeypoint(0, library.Theme["Element"]),
												newColorSequenceKeypoint(1, library.Theme["Background"])
											})
										})
										
										-- fading эффект справа
										local rgbFading = utility:create("Frame", {
											Parent = rgbBackground,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											AnchorPoint = newVector2(1, 0),
											Position = newUDim2(1, 0, 0, 0),
											Size = newUDim2(0, 60, 1, 0),
											ZIndex = 202
										})
										
										utility:create("UIGradient", {
											Parent = rgbFading,
											Color = newColorSequence({
												newColorSequenceKeypoint(0, library.Theme["Element"]),
												newColorSequenceKeypoint(1, library.Theme["Background"])
											}),
											Transparency = newNumberSequence({
												newNumberSequenceKeypoint(0, 1),
												newNumberSequenceKeypoint(0.82, 0),
												newNumberSequenceKeypoint(1, 0)
											})
										})
										
										-- сам textbox
										local rgbBox = utility:create("TextBox", {
											Name = "RGBInput",
											Parent = rgbBackground,
											BackgroundTransparency = 1,
											BorderSizePixel = 0,
											Position = newUDim2(0, 2, 0, 0),
											Size = newUDim2(1, -4, 1, 0),
											FontFace = library.Font,
											Text = "255, 255, 255",
											TextColor3 = library.Theme["Text"],
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											ZIndex = 203,
											ClearTextOnFocus = false,
											PlaceholderText = "R, G, B",
											PlaceholderColor3 = library.Theme["Text"]:lerp(library.Theme["Background"], 0.6)
										})
										
										-- hovering эффекты для RGB textbox
										library.connections[#library.connections + 1] = rgbContainer.MouseEnter:Connect(function()
											utility:tween(rgbBackground, {BackgroundColor3 = library.Theme["Hovered Element"]}, 0.2)
										end)
										
										library.connections[#library.connections + 1] = rgbContainer.MouseLeave:Connect(function()
											if not rgbBox:IsFocused() then
												utility:tween(rgbBackground, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
											end
										end)
										
										library.connections[#library.connections + 1] = rgbBox.Focused:Connect(function()
											utility:tween(rgbBackground, {BackgroundColor3 = library.Theme["Hovered Element"]}, 0.2)
										end)
										
										library.connections[#library.connections + 1] = rgbBox.FocusLost:Connect(function()
											utility:tween(rgbBackground, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
										end)
										
										-- HEX textbox container
										local hexContainer = utility:create("Frame", {
											Name = "HEXContainer",
											Parent = textboxContainer,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Size = newUDim2(0, 85, 1, 0),
											ZIndex = 201,
											LayoutOrder = 2
										})
										
										local hexInline = utility:create("Frame", {
											Parent = hexContainer,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										local hexInlineInline = utility:create("Frame", {
											Parent = hexInline,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										local hexBackground = utility:create("Frame", {
											Parent = hexInlineInline,
											BackgroundColor3 = library.Theme["Element"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201,
											ClipsDescendants = true
										})
										
										-- градиент для background
										utility:create("UIGradient", {
											Parent = hexBackground,
											Rotation = 90,
											Color = newColorSequence({
												newColorSequenceKeypoint(0, library.Theme["Element"]),
												newColorSequenceKeypoint(1, library.Theme["Background"])
											})
										})
										
										-- fading эффект справа
										local hexFading = utility:create("Frame", {
											Parent = hexBackground,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											AnchorPoint = newVector2(1, 0),
											Position = newUDim2(1, 0, 0, 0),
											Size = newUDim2(0, 50, 1, 0),
											ZIndex = 202
										})
										
										utility:create("UIGradient", {
											Parent = hexFading,
											Color = newColorSequence({
												newColorSequenceKeypoint(0, library.Theme["Element"]),
												newColorSequenceKeypoint(1, library.Theme["Background"])
											}),
											Transparency = newNumberSequence({
												newNumberSequenceKeypoint(0, 1),
												newNumberSequenceKeypoint(0.82, 0),
												newNumberSequenceKeypoint(1, 0)
											})
										})
										
										-- сам textbox
										local hexBox = utility:create("TextBox", {
											Name = "HEXInput",
											Parent = hexBackground,
											BackgroundTransparency = 1,
											BorderSizePixel = 0,
											Position = newUDim2(0, 2, 0, 0),
											Size = newUDim2(1, -4, 1, 0),
											FontFace = library.Font,
											Text = "#FFFFFF",
											TextColor3 = library.Theme["Text"],
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											ZIndex = 203,
											ClearTextOnFocus = false,
											PlaceholderText = "#RRGGBB",
											PlaceholderColor3 = library.Theme["Text"]:lerp(library.Theme["Background"], 0.6)
										})
										
										-- hovering эффекты для HEX textbox
										library.connections[#library.connections + 1] = hexContainer.MouseEnter:Connect(function()
											utility:tween(hexBackground, {BackgroundColor3 = library.Theme["Hovered Element"]}, 0.2)
										end)
										
										library.connections[#library.connections + 1] = hexContainer.MouseLeave:Connect(function()
											if not hexBox:IsFocused() then
												utility:tween(hexBackground, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
											end
										end)
										
										library.connections[#library.connections + 1] = hexBox.Focused:Connect(function()
											utility:tween(hexBackground, {BackgroundColor3 = library.Theme["Hovered Element"]}, 0.2)
										end)
										
										library.connections[#library.connections + 1] = hexBox.FocusLost:Connect(function()
											utility:tween(hexBackground, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
										end)
										
										-- дропдаун с анимациями (Rainbow, Breathing)
										local animationsDropdown = utility:create("Frame", {
											Name = "AnimationsDropdown",
											Parent = windowBackground,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 3, 1, -21),
											Size = newUDim2(1, -6, 0, 18),
											ZIndex = 201
										})
										
										local animInline = utility:create("Frame", {
											Parent = animationsDropdown,
											BackgroundColor3 = library.Theme["Border"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										local animInlineInline = utility:create("Frame", {
											Parent = animInline,
											BackgroundColor3 = library.Theme["Outline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201
										})
										
										local animBackground = utility:create("Frame", {
											Parent = animInlineInline,
											BackgroundColor3 = library.Theme["Element"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 1),
											Size = newUDim2(1, -2, 1, -2),
											ZIndex = 201,
											ClipsDescendants = true
										})
										
										-- градиент для background
										utility:create("UIGradient", {
											Parent = animBackground,
											Rotation = 90,
											Color = newColorSequence({
												newColorSequenceKeypoint(0, library.Theme["Element"]),
												newColorSequenceKeypoint(1, library.Theme["Background"])
											})
										})
										
										-- fading эффект справа
										local animFading = utility:create("Frame", {
											Parent = animBackground,
											BackgroundColor3 = fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											AnchorPoint = newVector2(1, 0),
											Position = newUDim2(1, 0, 0, 0),
											Size = newUDim2(0, 50, 1, 0),
											ZIndex = 202
										})
										
										utility:create("UIGradient", {
											Parent = animFading,
											Color = newColorSequence({
												newColorSequenceKeypoint(0, library.Theme["Element"]),
												newColorSequenceKeypoint(1, library.Theme["Background"])
											}),
											Transparency = newNumberSequence({
												newNumberSequenceKeypoint(0, 1),
												newNumberSequenceKeypoint(0.82, 0),
												newNumberSequenceKeypoint(1, 0)
											})
										})
										
										-- кнопка для клика
										local animDropdownButton = utility:create("TextButton", {
											Name = "AnimDropdownButton",
											Parent = animBackground,
											BackgroundTransparency = 1,
											BorderSizePixel = 0,
											Size = newUDim2(1, 0, 1, 0),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 203
										})
										
										-- текст выбранных анимаций
										local animValueText = utility:create("TextLabel", {
											Name = "AnimValue",
											Parent = animDropdownButton,
											BackgroundTransparency = 1,
											Position = newUDim2(0, 2, 0, -1),
											Size = newUDim2(1, -12, 1, 0),
											FontFace = library.Font,
											Text = "None",
											TextColor3 = library.Theme["Text"],
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTruncate = Enum.TextTruncate.AtEnd,
											ZIndex = 203
										})
										
										utility:create("UIStroke", {
											Parent = animValueText,
											Color = library.Theme["Text Border"],
											Thickness = 1
										})
										
										-- иконка +/-
										local animIcon = utility:create("TextLabel", {
											Name = "AnimIcon",
											Parent = animDropdownButton,
											BackgroundTransparency = 1,
											Position = newUDim2(1, -10, 0, -1),
											Size = newUDim2(0, 10, 1, 0),
											FontFace = library.Font,
											Text = "+",
											TextColor3 = library.Theme["Text"],
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Center,
											ZIndex = 203
										})
										
										utility:create("UIStroke", {
											Parent = animIcon,
											Color = library.Theme["Text Border"],
											Thickness = 1
										})
										
										-- holder для опций
										local animOptionsHolder = utility:create("Frame", {
											Name = "AnimOptionsHolder",
											Parent = animationsDropdown,
											BackgroundColor3 = library.Theme["Inline"],
											BorderSizePixel = 0,
											Position = newUDim2(0, 0, 1, 2),
											Size = newUDim2(1, 0, 0, 0),
											AutomaticSize = Enum.AutomaticSize.Y,
											Visible = false,
											ZIndex = 250
										})
										
										utility:create("UIStroke", {
											Parent = animOptionsHolder,
											ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
											Color = library.Theme["Outline"],
											Thickness = 1
										})
										
										utility:create("UIListLayout", {
											Parent = animOptionsHolder,
											SortOrder = Enum.SortOrder.LayoutOrder
										})
										
										utility:create("UIPadding", {
											Parent = animOptionsHolder,
											PaddingBottom = newUDim(0, 2)
										})
										
										-- состояние дропдауна
										colorpicker.animationsOpen = false
										colorpicker.selectedAnimations = {}
										
										-- функция обновления текста
										local function updateAnimText()
											if #colorpicker.selectedAnimations > 0 then
												animValueText.Text = table.concat(colorpicker.selectedAnimations, ", ")
											else
												animValueText.Text = "None"
											end
										end
										
										-- создаем опции Rainbow и Breathing
										local animOptions = {"Rainbow", "Breathing"}
										local optionButtons = {}
										
										for _, optionName in ipairs(animOptions) do
											local optionButton = utility:create("TextButton", {
												Name = "AnimOption",
												Parent = animOptionsHolder,
												BackgroundTransparency = 1,
												Size = newUDim2(1, 0, 0, 12),
												AutoButtonColor = false,
												Text = "",
												ZIndex = 251
											})
											
											local optionText = utility:create("TextLabel", {
												Name = "OptionText",
												Parent = optionButton,
												BackgroundTransparency = 1,
												Position = newUDim2(0, 3, 0, 0),
												Size = newUDim2(1, -3, 1, 0),
												FontFace = library.Font,
												Text = optionName,
												TextColor3 = library.Theme["Text"],
												TextTransparency = 0.48,
												TextSize = 12,
												TextXAlignment = Enum.TextXAlignment.Left,
												ZIndex = 252
											})
											
											utility:create("UIStroke", {
												Parent = optionText,
												Color = library.Theme["Text Border"],
												Thickness = 1
											})
											
											optionButtons[optionName] = {
												button = optionButton,
												text = optionText,
												selected = false
											}
											
											-- клик по опции
											library.connections[#library.connections + 1] = optionButton.MouseButton1Click:Connect(function()
												local optionData = optionButtons[optionName]
												optionData.selected = not optionData.selected
												
												if optionData.selected then
													utility:tween(optionData.text, {TextColor3 = library.Theme["Accent"], TextTransparency = 0}, 0.2)
													table.insert(colorpicker.selectedAnimations, optionName)
												else
													utility:tween(optionData.text, {TextColor3 = library.Theme["Text"], TextTransparency = 0.48}, 0.2)
													local index = table.find(colorpicker.selectedAnimations, optionName)
													if index then
														table.remove(colorpicker.selectedAnimations, index)
													end
												end
												
												updateAnimText()
											end)
										end
										
										-- hover эффекты для дропдауна
										library.connections[#library.connections + 1] = animationsDropdown.MouseEnter:Connect(function()
											utility:tween(animBackground, {BackgroundColor3 = library.Theme["Hovered Element"]}, 0.2)
										end)
										
										library.connections[#library.connections + 1] = animationsDropdown.MouseLeave:Connect(function()
											utility:tween(animBackground, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
										end)
										
										-- клик по кнопке дропдауна
										library.connections[#library.connections + 1] = animDropdownButton.MouseButton1Click:Connect(function()
											colorpicker.animationsOpen = not colorpicker.animationsOpen
											animOptionsHolder.Visible = colorpicker.animationsOpen
											animIcon.Text = colorpicker.animationsOpen and "-" or "+"
										end)
										
										-- закрытие дропдауна при клике вне его
										library.connections[#library.connections + 1] = uis.InputBegan:Connect(function(input)
											if input.UserInputType == Enum.UserInputType.MouseButton1 then
												if colorpicker.animationsOpen then
													local mousePos = uis:GetMouseLocation() - guiService:GetGuiInset()
													local dropdownPos = animOptionsHolder.AbsolutePosition
													local dropdownSize = animOptionsHolder.AbsoluteSize
													local buttonPos = animDropdownButton.AbsolutePosition
													local buttonSize = animDropdownButton.AbsoluteSize
													
													-- проверяем клик вне дропдауна и кнопки
													local isOutsideDropdown = mousePos.X < dropdownPos.X or mousePos.X > dropdownPos.X + dropdownSize.X or
																			  mousePos.Y < dropdownPos.Y or mousePos.Y > dropdownPos.Y + dropdownSize.Y
													
													local isOutsideButton = mousePos.X < buttonPos.X or mousePos.X > buttonPos.X + buttonSize.X or
																		   mousePos.Y < buttonPos.Y or mousePos.Y > buttonPos.Y + buttonSize.Y
													
													if isOutsideDropdown and isOutsideButton and animOptionsHolder.Visible then
														colorpicker.animationsOpen = false
														animOptionsHolder.Visible = false
														animIcon.Text = "+"
													end
												end
											end
										end)
										
										-- сохраняем ссылки
										colorpicker.animationsDropdown = animationsDropdown
										colorpicker.animOptionsHolder = animOptionsHolder
										
										-- сохраняем ссылки
									colorpicker.button = colorButton
									colorpicker.buttonFrame = colorButtonFrame
									colorpicker.window = colorpickerWindow
									colorpicker.palette = paletteFrame
									colorpicker.paletteContainer = paletteContainer
									colorpicker.palettePicker = palettePicker
									colorpicker.hueFrame = hueFrame
									colorpicker.hueContainer = hueContainer
									colorpicker.huePicker = huePicker
									colorpicker.alphaContainer = alphaContainer
									colorpicker.alphaBackground = alphaBackground
									colorpicker.alphaColorFrame = alphaColorFrame
									colorpicker.alphaPicker = alphaPicker
									colorpicker.rgbBox = rgbBox
									colorpicker.hexBox = hexBox
								end
								
								-- dragging для colorpicker окна
								do
									local dragging = false
									local dragStart = nil
									local startPos = nil
									
									-- dragging за основное окно
									library.connections[#library.connections + 1] = colorpickerWindow.MouseButton1Down:Connect(function()
										dragging = true
										dragStart = uis:GetMouseLocation() - guiService:GetGuiInset()
										startPos = colorpickerWindow.Position
									end)
									
									library.connections[#library.connections + 1] = uis.InputChanged:Connect(function(input)
										if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
											local mousePos = uis:GetMouseLocation() - guiService:GetGuiInset()
											local delta = mousePos - dragStart
											
											colorpickerWindow.Position = newUDim2(
												startPos.X.Scale, startPos.X.Offset + delta.X,
												startPos.Y.Scale, startPos.Y.Offset + delta.Y
											)
										end
									end)
									
									library.connections[#library.connections + 1] = uis.InputEnded:Connect(function(input)
										if input.UserInputType == Enum.UserInputType.MouseButton1 then
											dragging = false
										end
									end)
								end
								
								-- HSV utility functions
								local function updateColorFromHSV()
									colorpicker.color = fromHSV(colorpicker.hue, colorpicker.saturation, colorpicker.value)
									
									-- обновляем цвет и прозрачность кнопки
									utility:tween(colorpicker.buttonFrame, {
										BackgroundColor3 = colorpicker.color,
										BackgroundTransparency = 1 - colorpicker.alpha
									}, 0.1)
									
									-- обновляем цвет палитры (hue)
									local hueColor = fromHSV(colorpicker.hue, 1, 1)
									paletteFrame.BackgroundColor3 = hueColor
									colorpicker.alphaColorFrame.BackgroundColor3 = colorpicker.color
									
									-- обновляем позицию пикеров
									palettePicker.Position = newUDim2(colorpicker.saturation, -1, 1 - colorpicker.value, -1)
									huePicker.Position = newUDim2(colorpicker.hue, 1, 0, 1) -- горизонтальная позиция
									colorpicker.alphaPicker.Position = newUDim2(0, 1, colorpicker.alpha, 1) -- вертикальная позиция
									
									-- обновляем textbox'ы (только если не в фокусе)
									if not colorpicker.rgbBox:IsFocused() then
										local r = floor(colorpicker.color.R * 255)
										local g = floor(colorpicker.color.G * 255)
										local b = floor(colorpicker.color.B * 255)
										colorpicker.rgbBox.Text = r .. ", " .. g .. ", " .. b
									end
									
									if not colorpicker.hexBox:IsFocused() then
										colorpicker.hexBox.Text = "#" .. colorpicker.color:ToHex()
									end
									
									-- сохраняем в флаги
									library.flags[colorpicker.flag] = {
										Color = colorpicker.color,
										Alpha = colorpicker.alpha,
										HexValue = "#" .. colorpicker.color:ToHex()
									}
									
									-- callback
									colorpicker.callback(colorpicker.color, colorpicker.alpha)
								end
								
								-- обновляем функцию Set
								function colorpicker:Set(color, alpha)
									colorpicker.color = color or fromRGB(255, 255, 255)
									colorpicker.alpha = alpha or 1
									
									-- конвертируем в HSV
									colorpicker.hue, colorpicker.saturation, colorpicker.value = colorpicker.color:ToHSV()
									
									updateColorFromHSV()
								end
								
								-- обработчики событий для палитры
								local paletteConnection
								library.connections[#library.connections + 1] = colorpicker.paletteContainer.MouseButton1Down:Connect(function()
									paletteConnection = uis.InputChanged:Connect(function(input)
										if input.UserInputType == Enum.UserInputType.MouseMovement then
											local mousePos = uis:GetMouseLocation() - guiService:GetGuiInset()
											local palettePos = paletteFrame.AbsolutePosition
											local paletteSize = paletteFrame.AbsoluteSize
											
											local relativeX = clamp((mousePos.X - palettePos.X) / paletteSize.X, 0, 1)
											local relativeY = clamp((mousePos.Y - palettePos.Y) / paletteSize.Y, 0, 1)
											
											colorpicker.saturation = relativeX
											colorpicker.value = 1 - relativeY -- инвертируем для правильного отображения
											
											updateColorFromHSV()
										end
									end)
								end)
								
								library.connections[#library.connections + 1] = uis.InputEnded:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseButton1 and paletteConnection then
										paletteConnection:Disconnect()
										paletteConnection = nil
									end
								end)
								
								-- обработчики событий для hue слайдера
								local hueConnection
								library.connections[#library.connections + 1] = colorpicker.hueContainer.MouseButton1Down:Connect(function()
									hueConnection = uis.InputChanged:Connect(function(input)
										if input.UserInputType == Enum.UserInputType.MouseMovement then
											local mousePos = uis:GetMouseLocation() - guiService:GetGuiInset()
											local huePos = hueFrame.AbsolutePosition
											local hueSize = hueFrame.AbsoluteSize
											
											local relativeX = clamp((mousePos.X - huePos.X) / hueSize.X, 0, 1)
											colorpicker.hue = relativeX
											
											updateColorFromHSV()
										end
									end)
								end)
								
								library.connections[#library.connections + 1] = uis.InputEnded:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseButton1 and hueConnection then
										hueConnection:Disconnect()
										hueConnection = nil
									end
								end)
								
								-- обработчики событий для alpha слайдера
								local alphaConnection
								library.connections[#library.connections + 1] = colorpicker.alphaContainer.MouseButton1Down:Connect(function()
									alphaConnection = uis.InputChanged:Connect(function(input)
										if input.UserInputType == Enum.UserInputType.MouseMovement then
											local mousePos = uis:GetMouseLocation() - guiService:GetGuiInset()
											local alphaPos = colorpicker.alphaBackground.AbsolutePosition
											local alphaSize = colorpicker.alphaBackground.AbsoluteSize
											
											local relativeY = clamp((mousePos.Y - alphaPos.Y) / alphaSize.Y, 0, 1)
											colorpicker.alpha = relativeY
											
											updateColorFromHSV()
										end
									end)
								end)
								
								library.connections[#library.connections + 1] = uis.InputEnded:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseButton1 and alphaConnection then
										alphaConnection:Disconnect()
										alphaConnection = nil
									end
								end)
								
								-- RGB textbox обработчик
								library.connections[#library.connections + 1] = colorpicker.rgbBox.FocusLost:Connect(function()
									local text = colorpicker.rgbBox.Text
									local r, g, b = text:match("(%d+)%s*,%s*(%d+)%s*,%s*(%d+)")
									
									if r and g and b then
										r = clamp(tonumber(r) or 0, 0, 255)
										g = clamp(tonumber(g) or 0, 0, 255)
										b = clamp(tonumber(b) or 0, 0, 255)
										
										colorpicker.color = fromRGB(r, g, b)
										colorpicker.hue, colorpicker.saturation, colorpicker.value = colorpicker.color:ToHSV()
										
										updateColorFromHSV()
									end
								end)
								
								-- HEX textbox обработчик
								library.connections[#library.connections + 1] = colorpicker.hexBox.FocusLost:Connect(function()
									local text = colorpicker.hexBox.Text
									
									-- убираем # если есть
									text = text:gsub("#", "")
									
									-- проверяем что это валидный hex (6 символов)
									if #text == 6 and text:match("^%x+$") then
										local success, color = pcall(function()
											return fromRGB(
												tonumber(text:sub(1, 2), 16),
												tonumber(text:sub(3, 4), 16),
												tonumber(text:sub(5, 6), 16)
											)
										end)
										
										if success then
											colorpicker.color = color
											colorpicker.hue, colorpicker.saturation, colorpicker.value = colorpicker.color:ToHSV()
											
											updateColorFromHSV()
										end
									end
								end)
									
									-- click event
									library.connections[#library.connections + 1] = colorButton.MouseButton1Click:Connect(function()
										colorpicker.isOpen = not colorpicker.isOpen
										
										if colorpicker.isOpen then
											-- позиционируем окно рядом с кнопкой
											local buttonPos = colorButton.AbsolutePosition
											local buttonSize = colorButton.AbsoluteSize
											
											colorpickerWindow.Position = newUDim2(0, buttonPos.X + buttonSize.X + 5, 0, buttonPos.Y)
											colorpickerWindow.Visible = true
										else
											colorpickerWindow.Visible = false
										end
									end)
									
									-- set default
									colorpicker:Set(colorpicker.default, colorpicker.alpha)
									
									-- цикл анимаций (Rainbow и Breathing)
									task.spawn(function()
										while true do
											task.wait()
											
											-- проверяем есть ли выбранные анимации
											if #colorpicker.selectedAnimations == 0 then
												continue
											end
											
											-- вычисляем синусоиду для плавной анимации
											local sine = math.abs(math.sin(tick()))
											
											-- проверяем какие анимации активны
											local hasRainbow = table.find(colorpicker.selectedAnimations, "Rainbow")
											local hasBreathing = table.find(colorpicker.selectedAnimations, "Breathing")
											
											-- применяем Rainbow (меняет Hue)
											local newHue = hasRainbow and sine or colorpicker.hue
											
											-- применяем Breathing (меняет Alpha)
											local newAlpha = hasBreathing and sine or colorpicker.alpha
											
											-- обновляем цвет если есть активные анимации
											if hasRainbow or hasBreathing then
												colorpicker.hue = newHue
												colorpicker.alpha = newAlpha
												
												-- обновляем визуал
												colorpicker.color = fromHSV(colorpicker.hue, colorpicker.saturation, colorpicker.value)
												
												-- обновляем цвет и прозрачность кнопки
												colorpicker.buttonFrame.BackgroundColor3 = colorpicker.color
												colorpicker.buttonFrame.BackgroundTransparency = 1 - colorpicker.alpha
												
												-- обновляем цвет палитры (hue)
												local hueColor = fromHSV(colorpicker.hue, 1, 1)
												colorpicker.palette.BackgroundColor3 = hueColor
												colorpicker.alphaColorFrame.BackgroundColor3 = colorpicker.color
												
												-- обновляем позицию пикеров
												colorpicker.palettePicker.Position = newUDim2(colorpicker.saturation, -1, 1 - colorpicker.value, -1)
												colorpicker.huePicker.Position = newUDim2(colorpicker.hue, 1, 0, 1)
												colorpicker.alphaPicker.Position = newUDim2(0, 1, colorpicker.alpha, 1)
												
												-- обновляем textbox'ы (только если не в фокусе)
												if not colorpicker.rgbBox:IsFocused() then
													local r = floor(colorpicker.color.R * 255)
													local g = floor(colorpicker.color.G * 255)
													local b = floor(colorpicker.color.B * 255)
													colorpicker.rgbBox.Text = r .. ", " .. g .. ", " .. b
												end
												
												if not colorpicker.hexBox:IsFocused() then
													colorpicker.hexBox.Text = "#" .. colorpicker.color:ToHex()
												end
												
												-- сохраняем в флаги
												library.flags[colorpicker.flag] = {
													Color = colorpicker.color,
													Alpha = colorpicker.alpha,
													HexValue = "#" .. colorpicker.color:ToHex()
												}
												
												-- callback
												colorpicker.callback(colorpicker.color, colorpicker.alpha)
											end
										end
									end)
									
									return colorpicker
								end
								
								-- AddKeybind для toggle
								function toggle:AddKeybind(properties)
									properties = properties or {}
									
									local keybind = {
										name = properties.Name or toggle.name,
										flag = properties.Flag or properties.Name or toggle.name .. "_Keybind",
										default = properties.Key or nil,
										mode = properties.Mode or "Toggle",
										callback = properties.Callback or function() end,
										active = false,
										binding = false,
										key = properties.Key or nil,
										section = toggle.section
									}
									
									-- создаем кнопку keybind (в rightHolder) - outline
									local keybindButton = utility:create("TextButton", {
										Name = "KeybindOutline",
										Parent = toggle.rightHolder,
										BackgroundColor3 = library.Theme["Outline"],
										BorderSizePixel = 0,
										Size = newUDim2(0, 24, 0, 10),
										AutoButtonColor = false,
										Text = "",
										ZIndex = 105
									})
									
									utility:create("UIStroke", {
										Parent = keybindButton,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- inline рамка
									local keybindInline = utility:create("Frame", {
										Name = "Inline",
										Parent = keybindButton,
										BackgroundColor3 = library.Theme["Border"],
										BorderSizePixel = 0,
										Position = newUDim2(0, 1, 0, 1),
										Size = newUDim2(1, -2, 1, -2),
										ZIndex = 105
									})
									
									-- handler (внутренний фон с градиентом)
									local keybindHandler = utility:create("Frame", {
										Name = "Handler",
										Parent = keybindInline,
										BackgroundColor3 = library.Theme["Element"],
										BorderSizePixel = 0,
										Position = newUDim2(0, 1, 0, 1),
										Size = newUDim2(1, -2, 1, -2),
										ZIndex = 105
									})
									
									utility:create("UIGradient", {
										Parent = keybindHandler,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, library.Theme["Element"]),
											newColorSequenceKeypoint(1, library.Theme["Background"])
										})
									})
									
									-- текст клавиши
									local keybindText = utility:create("TextLabel", {
										Name = "KeybindText",
										Parent = keybindHandler,
										BackgroundTransparency = 1,
										Size = newUDim2(1, 0, 1, 0),
										Position = newUDim2(0, 0, 0, -1),
										FontFace = library.Font,
										Text = "NONE",
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Center,
										ZIndex = 106
									})
									
									utility:create("UIStroke", {
										Parent = keybindText,
										Color = library.Theme["Text Border"],
										Thickness = 1
									})
									
									-- создаем окно настроек keybind (открывается по ПКМ)
									local keybindWindow = utility:create("Frame", {
										Name = "KeybindWindow",
										Parent = toggle.section.window.screenGui,
										BackgroundColor3 = library.Theme["Outline"],
										BorderSizePixel = 0,
										Position = newUDim2(0, 0, 0, 0),
										Size = newUDim2(0, 60, 0, 0),
										AutomaticSize = Enum.AutomaticSize.Y,
										Visible = false,
										ZIndex = 250
									})
									
									utility:create("UIStroke", {
										Parent = keybindWindow,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1
									})
									
									local kbWindowInline = utility:create("Frame", {
										Parent = keybindWindow,
										BackgroundColor3 = library.Theme["Border"],
										BorderSizePixel = 0,
										Position = newUDim2(0, 1, 0, 1),
										Size = newUDim2(1, -2, 1, -2),
										AutomaticSize = Enum.AutomaticSize.Y,
										ZIndex = 250
									})
									
									local kbWindowInlineInline = utility:create("Frame", {
										Parent = kbWindowInline,
										BackgroundColor3 = library.Theme["Outline"],
										BorderSizePixel = 0,
										Position = newUDim2(0, 1, 0, 1),
										Size = newUDim2(1, -2, 1, -2),
										AutomaticSize = Enum.AutomaticSize.Y,
										ZIndex = 250
									})
									
									local kbWindowBackground = utility:create("Frame", {
										Parent = kbWindowInlineInline,
										BackgroundColor3 = library.Theme["Background"],
										BorderSizePixel = 0,
										Position = newUDim2(0, 1, 0, 1),
										Size = newUDim2(1, -2, 1, -2),
										AutomaticSize = Enum.AutomaticSize.Y,
										ZIndex = 250
									})
									
									utility:create("UIGradient", {
										Parent = kbWindowBackground,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, library.Theme["Element"]),
											newColorSequenceKeypoint(1, library.Theme["Background"])
										})
									})
									
									-- контейнер для элементов
									local kbElementsContainer = utility:create("Frame", {
										Parent = kbWindowBackground,
										BackgroundTransparency = 1,
										Size = newUDim2(1, 0, 1, 0),
										AutomaticSize = Enum.AutomaticSize.Y,
										ZIndex = 251
									})
									
									utility:create("UIListLayout", {
										Parent = kbElementsContainer,
										Padding = newUDim(0, 2),
										SortOrder = Enum.SortOrder.LayoutOrder
									})
									
									utility:create("UIPadding", {
										Parent = kbElementsContainer,
										PaddingTop = newUDim(0, 4),
										PaddingBottom = newUDim(0, 4),
										PaddingLeft = newUDim(0, 4),
										PaddingRight = newUDim(0, 4)
									})
									
									-- дропдаун режимов (Toggle, Hold, Always)
									local modeOptions = {"Toggle", "Hold", "Always"}
									local modeButtons = {}
									
									for _, modeName in ipairs(modeOptions) do
										local modeButton = utility:create("TextButton", {
											Name = "ModeOption",
											Parent = kbElementsContainer,
											BackgroundTransparency = 1,
											Size = newUDim2(1, 0, 0, 14),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 252
										})
										
										local modeText = utility:create("TextLabel", {
											Name = "ModeText",
											Parent = modeButton,
											BackgroundTransparency = 1,
											Size = newUDim2(1, 0, 1, 0),
											FontFace = library.Font,
											Text = string.lower(modeName),
											TextColor3 = library.Theme["Text"],
											TextTransparency = keybind.mode == modeName and 0 or 0.48,
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Center,
											ZIndex = 253
										})
										
										utility:create("UIStroke", {
											Parent = modeText,
											Color = library.Theme["Text Border"],
											Thickness = 1
										})
										
										if keybind.mode == modeName then
											modeText.TextColor3 = library.Theme["Accent"]
										end
										
										modeButtons[modeName] = {
											button = modeButton,
											text = modeText
										}
										
										-- клик по режиму
										library.connections[#library.connections + 1] = modeButton.MouseButton1Click:Connect(function()
											-- сбрасываем все режимы
											for name, data in pairs(modeButtons) do
												utility:tween(data.text, {
													TextColor3 = library.Theme["Text"],
													TextTransparency = 0.48
												}, 0.2)
											end
											
											-- активируем выбранный
											utility:tween(modeText, {
												TextColor3 = library.Theme["Accent"],
												TextTransparency = 0
											}, 0.2)
											
											keybind.mode = modeName
											
											-- для Always режима сразу активируем
											if modeName == "Always" then
												keybind:Set(true)
											end
											
											library.flags[keybind.flag].Mode = modeName
										end)
									end
									
									-- ПКМ - открытие окна настроек
									library.connections[#library.connections + 1] = keybindButton.MouseButton2Click:Connect(function()
										keybind.settingsOpen = not keybind.settingsOpen
										
										if keybind.settingsOpen then
											local buttonPos = keybindButton.AbsolutePosition
											keybindWindow.Position = newUDim2(0, buttonPos.X, 0, buttonPos.Y + 20)
											keybindWindow.Visible = true
										else
											keybindWindow.Visible = false
										end
									end)
									
									-- закрытие окна при клике вне его
									library.connections[#library.connections + 1] = uis.InputBegan:Connect(function(input)
										if input.UserInputType == Enum.UserInputType.MouseButton1 then
											if keybind.settingsOpen and keybindWindow.Visible then
												local mousePos = uis:GetMouseLocation() - guiService:GetGuiInset()
												local windowPos = keybindWindow.AbsolutePosition
												local windowSize = keybindWindow.AbsoluteSize
												
												local isOutside = mousePos.X < windowPos.X or mousePos.X > windowPos.X + windowSize.X or
																 mousePos.Y < windowPos.Y or mousePos.Y > windowPos.Y + windowSize.Y
												
												if isOutside then
													keybind.settingsOpen = false
													keybindWindow.Visible = false
												end
											end
										end
									end)
									
									-- сохраняем ссылки
									keybind.window = keybindWindow
									keybind.settingsOpen = false
									
									-- функция обновления текста кнопки
									function keybind:UpdateText()
										if keybind.key then
											local keyName = tostring(keybind.key):gsub("Enum.KeyCode.", ""):gsub("Enum.UserInputType.", "")
											-- делаем короткие названия для часто используемых клавиш
											if keyName == "LeftShift" then keyName = "LS"
											elseif keyName == "RightShift" then keyName = "RS"
											elseif keyName == "LeftControl" then keyName = "LC"
											elseif keyName == "RightControl" then keyName = "RC"
											elseif keyName == "LeftAlt" then keyName = "LA"
											elseif keyName == "RightAlt" then keyName = "RA"
											elseif keyName == "MouseButton1" then keyName = "M1"
											elseif keyName == "MouseButton2" then keyName = "M2"
											elseif keyName == "MouseButton3" then keyName = "M3"
											end
											keybindText.Text = string.lower(keyName)
										else
											keybindText.Text = "---"
										end
									end
									
									-- функция установки клавиши
									function keybind:Set(input)
										if type(input) == "boolean" then
											keybind.active = input
											keybind.callback(keybind.active)
										elseif typeof(input) == "EnumItem" then
											if input.Name == "Escape" then
												keybind.key = nil
											else
												keybind.key = input
											end
											keybind:UpdateText()
										elseif type(input) == "table" then
											if input.Key then
												keybind.key = input.Key
											end
											if input.Mode then
												keybind.mode = input.Mode
											end
											if input.Active ~= nil then
												keybind.active = input.Active
											end
											keybind:UpdateText()
										end
										
										library.flags[keybind.flag] = {
											Key = keybind.key,
											Mode = keybind.mode,
											Active = keybind.active
										}
									end
									
									-- ЛКМ - привязка клавиши
									library.connections[#library.connections + 1] = keybindButton.MouseButton1Click:Connect(function()
										if keybind.binding then return end
										
										keybind.binding = true
										keybindText.Text = "..."
										
										local connection
										connection = uis.InputBegan:Connect(function(input, gameProcessed)
											task.wait()
											
											local keyCode = input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode or input.UserInputType
											keybind:Set(keyCode)
											
											keybind.binding = false
											connection:Disconnect()
										end)
									end)
									
									-- обработчик нажатий клавиш
									library.connections[#library.connections + 1] = uis.InputBegan:Connect(function(input, gameProcessed)
										if gameProcessed or keybind.binding then return end
										
										local keyCode = input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode or input.UserInputType
										
										if keyCode == keybind.key then
											if keybind.mode == "Toggle" then
												keybind.active = not keybind.active
												keybind:Set(keybind.active)
											elseif keybind.mode == "Hold" then
												keybind:Set(true)
											elseif keybind.mode == "Always" then
												keybind:Set(true)
											end
										end
									end)
									
									-- обработчик отпускания клавиш (для Hold режима)
									library.connections[#library.connections + 1] = uis.InputEnded:Connect(function(input, gameProcessed)
										if gameProcessed then return end
										
										local keyCode = input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode or input.UserInputType
										
										if keyCode == keybind.key and keybind.mode == "Hold" then
											keybind:Set(false)
										end
									end)
									
									-- set default
									if keybind.default then
										keybind:Set(keybind.default)
									end
									
									-- сохраняем ссылки
									toggle.keybind = keybind
									keybind.button = keybindButton
									keybind.text = keybindText
									
									return keybind
								end
								
								return toggle
							end
							
							-- AddSlider для секции
							function section:AddSlider(properties)
								properties = properties or {}
								
								local slider = {
									name = properties.Name or "Slider",
									flag = properties.Flag or properties.Name or "Slider",
									min = properties.Min or 0,
									max = properties.Max or 100,
									default = properties.Default or 50,
									decimals = properties.Decimals or 1,
									suffix = properties.Suffix or "",
									value = properties.Default or 50,
									callback = properties.Callback or function() end,
									dragging = false
								}
								
								local sliderFrame, sliderText, sliderOutline, sliderBackground, sliderFill, sliderValue
								
								do -- // Slider UI
									-- slider frame
									sliderFrame = utility:create("Frame", {
										Name = "Slider",
										Parent = section.container,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(1, 0, 0, slider.name and 27 or 10),
										ZIndex = 103
									})
									
									-- slider text (название)
									if slider.name then
										sliderText = utility:create("TextLabel", {
											Name = "Text",
											Parent = sliderFrame,
											BackgroundTransparency = 1,
											BorderColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Position = newUDim2(0, 1, 0, 0),
											Size = newUDim2(1, -2, 0, 12),
											FontFace = library.Font,
											Text = slider.name,
											TextColor3 = library.Theme["Text"],
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											ZIndex = 104
										})
										
										utility:create("UIStroke", {
											Parent = sliderText,
											Color = library.Theme["Text Border"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
									end
									
									-- slider outline (кнопка для драга)
									sliderOutline = utility:create("TextButton", {
										Name = "Outline",
										Parent = sliderFrame,
										BackgroundColor3 = library.Theme["Outline"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 4, 0, slider.name and 17 or 0),
										Size = newUDim2(1, -8, 0, 10),
										AutoButtonColor = false,
										Text = "",
										ZIndex = 104
									})
									
									-- slider background
									sliderBackground = utility:create("Frame", {
										Name = "Background",
										Parent = sliderOutline,
										BackgroundColor3 = library.Theme["Element"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 1, 0, 1),
										Size = newUDim2(1, -2, 1, -2),
										ZIndex = 105
									})
									
									-- background gradient
									utility:create("UIGradient", {
										Parent = sliderBackground,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(30, 30, 35)),
											newColorSequenceKeypoint(1, fromRGB(23, 23, 28))
										})
									})
									
									-- slider fill (акцент)
									sliderFill = utility:create("Frame", {
										Name = "Fill",
										Parent = sliderBackground,
										BackgroundColor3 = library.Theme["Accent"],
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(0.5, 0, 1, 0),
										ZIndex = 106
									})
									
									-- fill gradient
									utility:create("UIGradient", {
										Parent = sliderFill,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
											newColorSequenceKeypoint(1, fromRGB(42, 42, 42))
										})
									})
									
									-- slider value text
									sliderValue = utility:create("TextLabel", {
										Name = "Value",
										Parent = sliderFill,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										AnchorPoint = newVector2(0.5, 0.5),
										Position = newUDim2(1, 0, 0.5, 1),
										Size = newUDim2(0, 50, 0, 12),
										FontFace = library.Font,
										Text = "50",
										TextColor3 = fromRGB(235, 235, 235),
										TextSize = 12,
										ZIndex = 107
									})
									
									utility:create("UIStroke", {
										Parent = sliderValue,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- index
									slider.frame = sliderFrame
									slider.text = sliderText
									slider.outline = sliderOutline
									slider.background = sliderBackground
									slider.fill = sliderFill
									slider.valueLabel = sliderValue
								end
								
								do -- // Slider Functions
									function slider:Set(value)
										slider.value = clamp(floor(value / slider.decimals + 0.5) * slider.decimals, slider.min, slider.max)
										library.flags[slider.flag] = slider.value
										
										-- update value text
										slider.valueLabel.Text = tostring(slider.value) .. slider.suffix
										
										-- update fill size
										local percentage = (slider.value - slider.min) / (slider.max - slider.min)
										utility:tween(slider.fill, {Size = newUDim2(percentage, 0, 1, 0)}, 0.1)
										
										-- callback
										slider.callback(slider.value)
									end
									
									function slider:Get()
										return slider.value
									end
									
									function slider:UpdateValue()
										local mousePos = uis:GetMouseLocation().X
										local sliderPos = slider.outline.AbsolutePosition.X
										local sliderSize = slider.outline.AbsoluteSize.X
										local percentage = clamp((mousePos - sliderPos) / sliderSize, 0, 1)
										local value = slider.min + (slider.max - slider.min) * percentage
										slider:Set(value)
									end
								end
								
								-- dragging logic (оптимизировано)
								library.connections[#library.connections + 1] = sliderOutline.MouseButton1Down:Connect(function()
									library.activeSlider = slider
									slider:UpdateValue()
								end)
								
								-- set default
								slider:Set(slider.default)
								
								return slider
							end
							
							-- AddTextbox для секции
							function section:AddTextbox(properties)
								properties = properties or {}
								
								local textbox = {
									name = properties.Name or "Textbox",
									flag = properties.Flag or properties.Name or "Textbox",
									placeholder = properties.Placeholder or "...",
									default = properties.Default or "",
									callback = properties.Callback or function() end,
									value = "",
									section = section
								}
								
								local textboxContainer, textboxBackground, textboxInput
								
								do -- // Textbox UI
									-- контейнер textbox
									textboxContainer = utility:create("Frame", {
										Name = "TextboxContainer",
										Parent = section.container,
										BackgroundTransparency = 1,
										Size = newUDim2(1, 0, 0, 34),
										ZIndex = 104
									})
									
									-- текст названия
									local textboxLabel = utility:create("TextLabel", {
										Name = "Label",
										Parent = textboxContainer,
										BackgroundTransparency = 1,
										Size = newUDim2(1, 0, 0, 13),
										FontFace = library.Font,
										Text = textbox.name,
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										ZIndex = 104
									})
									
									utility:create("UIStroke", {
										Parent = textboxLabel,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- background (outline)
									textboxBackground = utility:create("Frame", {
										Name = "Background",
										Parent = textboxContainer,
										BackgroundColor3 = library.Theme["Element"],
										BorderColor3 = library.Theme["Border"],
										BorderSizePixel = 2,
										Position = newUDim2(0, 0, 1, 0),
										AnchorPoint = newVector2(0, 1),
										Size = newUDim2(1, 0, 0, 17),
										ZIndex = 104
									})
									
									utility:create("UIGradient", {
										Parent = textboxBackground,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
											newColorSequenceKeypoint(1, fromRGB(100, 100, 100))
										})
									})
									
									utility:create("UIStroke", {
										Parent = textboxBackground,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- textbox input
									textboxInput = utility:create("TextBox", {
										Name = "Input",
										Parent = textboxBackground,
										BackgroundTransparency = 1,
										Size = newUDim2(1, 0, 1, 0),
										FontFace = library.Font,
										Text = "",
										PlaceholderText = textbox.placeholder,
										PlaceholderColor3 = fromRGB(178, 178, 178),
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										ClearTextOnFocus = false,
										ZIndex = 105
									})
									
									utility:create("UIPadding", {
										Parent = textboxInput,
										PaddingLeft = newUDim(0, 5),
										PaddingBottom = newUDim(0, 3)
									})
									
									utility:create("UIStroke", {
										Parent = textboxInput,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									textbox.container = textboxContainer
									textbox.background = textboxBackground
									textbox.input = textboxInput
								end
								
								do -- // Textbox Functions
									function textbox:Set(value)
										textbox.value = value or ""
										textbox.input.Text = textbox.value
										library.flags[textbox.flag] = textbox.value
										textbox.callback(textbox.value)
									end
									
									function textbox:Get()
										return textbox.value
									end
								end
								
								-- hover effect
								library.connections[#library.connections + 1] = textboxBackground.MouseEnter:Connect(function()
									utility:tween(textboxBackground, {BackgroundColor3 = library.Theme["Hovered Element"]}, 0.2)
								end)
								
								library.connections[#library.connections + 1] = textboxBackground.MouseLeave:Connect(function()
									utility:tween(textboxBackground, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
								end)
								
								-- focus events
								library.connections[#library.connections + 1] = textboxInput.Focused:Connect(function()
									utility:tween(textboxInput, {TextColor3 = library.Theme["Accent"]}, 0.2)
								end)
								
								library.connections[#library.connections + 1] = textboxInput.FocusLost:Connect(function()
									utility:tween(textboxInput, {TextColor3 = library.Theme["Text"]}, 0.2)
									textbox:Set(textboxInput.Text)
								end)
								
								-- set default
								if textbox.default ~= "" then
									textbox:Set(textbox.default)
								end
								
								return textbox
							end
							
							-- AddLabel для секции
							function section:AddLabel(properties)
								properties = properties or {}
								
								local label = {
									name = properties.Name or properties.Text or "Label",
									section = section
								}
								
								local labelFrame, labelText, rightHolder
								
								do -- // Label UI
									-- основной контейнер
									labelFrame = utility:create("TextLabel", {
										Name = "Label",
										Parent = section.container,
										BackgroundTransparency = 1,
										Size = newUDim2(1, -8, 0, 12),
										AutomaticSize = Enum.AutomaticSize.Y,
										FontFace = library.Font,
										Text = "",
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										TextYAlignment = Enum.TextYAlignment.Top,
										ZIndex = 104
									})
									
									utility:create("UIStroke", {
										Parent = labelFrame,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- left components (текст)
									local leftComponents = utility:create("Frame", {
										Name = "LeftComponents",
										Parent = labelFrame,
										BackgroundTransparency = 1,
										Position = newUDim2(0, 2, 0, -1),
										Size = newUDim2(0, 0, 0, 14),
										ZIndex = 104
									})
									
									labelText = utility:create("TextLabel", {
										Name = "Text",
										Parent = leftComponents,
										BackgroundTransparency = 1,
										AutomaticSize = Enum.AutomaticSize.Y,
										FontFace = library.Font,
										Text = label.name,
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										ZIndex = 104
									})
									
									utility:create("UIStroke", {
										Parent = labelText,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- right holder для дополнительных элементов
									rightHolder = utility:create("Frame", {
										Name = "RightHolder",
										Parent = labelFrame,
										BackgroundTransparency = 1,
										AnchorPoint = newVector2(1, 0),
										Position = newUDim2(1, -1, 0, 1),
										Size = newUDim2(0, 0, 0, 12),
										ZIndex = 104
									})
									
									utility:create("UIListLayout", {
										Parent = rightHolder,
										FillDirection = Enum.FillDirection.Horizontal,
										HorizontalAlignment = Enum.HorizontalAlignment.Right,
										VerticalAlignment = Enum.VerticalAlignment.Center,
										Padding = newUDim(0, 4),
										SortOrder = Enum.SortOrder.LayoutOrder
									})
									
									label.frame = labelFrame
									label.text = labelText
									label.rightHolder = rightHolder
								end
								
								do -- // Label Functions
									function label:SetText(text)
										label.name = text
										labelText.Text = text
									end
									
									function label:GetText()
										return label.name
									end
								end
								
								return label
							end
							
							-- AddDropdown для секции
							function section:AddDropdown(properties)
								properties = properties or {}
								
								local dropdown = {
									name = properties.Name or "Dropdown",
									flag = properties.Flag or properties.Name or "Dropdown",
									items = properties.Items or {"Option 1", "Option 2", "Option 3"},
									default = properties.Default or nil,
									multi = properties.Multi or false,
									value = properties.Multi and {} or nil,
									callback = properties.Callback or function() end,
									isOpen = false,
									options = {}
								}
								
								local dropdownFrame, dropdownText, dropdownButton, dropdownValue, dropdownIcon, optionHolder
								
								do -- // Dropdown UI
									-- dropdown frame
									dropdownFrame = utility:create("Frame", {
										Name = "Dropdown",
										Parent = section.container,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Size = newUDim2(1, 0, 0, 34),
										ZIndex = 103
									})
									
									-- dropdown text (название)
									dropdownText = utility:create("TextLabel", {
										Name = "Text",
										Parent = dropdownFrame,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 0, 0, 0),
										Size = newUDim2(1, 0, 0, 13),
										FontFace = library.Font,
										Text = dropdown.name,
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										ZIndex = 104
									})
									
									utility:create("UIStroke", {
										Parent = dropdownText,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- dropdown button
									dropdownButton = utility:create("Frame", {
										Name = "Button",
										Parent = dropdownFrame,
										BackgroundColor3 = library.Theme["Background"],
										BorderColor3 = library.Theme["Border"],
										BorderSizePixel = 2,
										Position = newUDim2(0, 0, 1, -17),
										Size = newUDim2(1, 0, 0, 17),
										ZIndex = 104
									})
									
									-- button gradient
									utility:create("UIGradient", {
										Parent = dropdownButton,
										Rotation = 90,
										Color = newColorSequence({
											newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
											newColorSequenceKeypoint(1, fromRGB(100, 100, 100))
										})
									})
									
									-- button outline
									utility:create("UIStroke", {
										Parent = dropdownButton,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- dropdown value text
									dropdownValue = utility:create("TextLabel", {
										Name = "Value",
										Parent = dropdownButton,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, 5, 0, -1),
										Size = newUDim2(1, -25, 1, 0),
										FontFace = library.Font,
										Text = "--",
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Left,
										TextTruncate = Enum.TextTruncate.AtEnd,
										ZIndex = 105
									})
									
									utility:create("UIStroke", {
										Parent = dropdownValue,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- dropdown icon (+/-)
									dropdownIcon = utility:create("TextLabel", {
										Name = "Icon",
										Parent = dropdownButton,
										BackgroundTransparency = 1,
										BorderColor3 = fromRGB(0, 0, 0),
										BorderSizePixel = 0,
										Position = newUDim2(0, -4, 0, -1),
										Size = newUDim2(1, 0, 1, 0),
										FontFace = library.Font,
										Text = "+",
										TextColor3 = library.Theme["Text"],
										TextSize = 12,
										TextXAlignment = Enum.TextXAlignment.Right,
										ZIndex = 105
									})
									
									utility:create("UIStroke", {
										Parent = dropdownIcon,
										Color = library.Theme["Text Border"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									-- option holder
									optionHolder = utility:create("Frame", {
										Name = "OptionHolder",
										Parent = dropdownFrame,
										BackgroundColor3 = library.Theme["Inline"],
										BorderColor3 = library.Theme["Border"],
										BorderSizePixel = 2,
										Position = newUDim2(0, 0, 1, 5),
										Size = newUDim2(1, 0, 0, 0),
										AutomaticSize = Enum.AutomaticSize.Y,
										Visible = false,
										ZIndex = 115
									})
									
									utility:create("UIStroke", {
										Parent = optionHolder,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = library.Theme["Outline"],
										Thickness = 1,
										LineJoinMode = Enum.LineJoinMode.Miter
									})
									
									utility:create("UIListLayout", {
										Parent = optionHolder,
										SortOrder = Enum.SortOrder.LayoutOrder
									})
									
									utility:create("UIPadding", {
										Parent = optionHolder,
										PaddingBottom = newUDim(0, 2)
									})
									
									-- index
									dropdown.frame = dropdownFrame
									dropdown.text = dropdownText
									dropdown.button = dropdownButton
									dropdown.valueLabel = dropdownValue
									dropdown.icon = dropdownIcon
									dropdown.holder = optionHolder
								end
								
								do -- // Dropdown Functions
									function dropdown:AddOption(optionName)
										local optionButton = utility:create("TextButton", {
											Name = "Option",
											Parent = dropdown.holder,
											BackgroundTransparency = 1,
											BorderColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Size = newUDim2(1, 0, 0, 15),
											AutoButtonColor = false,
											Text = "",
											ZIndex = 116
										})
										
										local optionText = utility:create("TextLabel", {
											Name = "Text",
											Parent = optionButton,
											BackgroundTransparency = 1,
											BorderColor3 = fromRGB(0, 0, 0),
											BorderSizePixel = 0,
											Position = newUDim2(0, 5, 0, 0),
											Size = newUDim2(1, -5, 1, 0),
											FontFace = library.Font,
											Text = optionName,
											TextColor3 = library.Theme["Text"],
											TextTransparency = 0.48,
											TextSize = 12,
											TextXAlignment = Enum.TextXAlignment.Left,
											ZIndex = 117
										})
										
										utility:create("UIStroke", {
											Parent = optionText,
											Color = library.Theme["Text Border"],
											Thickness = 1,
											LineJoinMode = Enum.LineJoinMode.Miter
										})
										
										local optionData = {
											name = optionName,
											selected = false,
											button = optionButton,
											text = optionText
										}
										
										function optionData:Toggle(state)
											if state then
												utility:tween(optionData.text, {TextColor3 = library.Theme["Accent"], TextTransparency = 0}, 0.2)
											else
												utility:tween(optionData.text, {TextColor3 = library.Theme["Text"], TextTransparency = 0.48}, 0.2)
											end
										end
										
										optionButton.MouseButton1Click:Connect(function()
											if dropdown.multi then
												-- multi select
												optionData.selected = not optionData.selected
												optionData:Toggle(optionData.selected)
												
												local index = table.find(dropdown.value, optionName)
												if index then
													table.remove(dropdown.value, index)
												else
													table.insert(dropdown.value, optionName)
												end
												
												library.flags[dropdown.flag] = dropdown.value
												dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
												dropdown.callback(dropdown.value)
											else
												-- single select
												for _, opt in pairs(dropdown.options) do
													opt.selected = false
													opt:Toggle(false)
												end
												
												optionData.selected = true
												optionData:Toggle(true)
												dropdown.value = optionName
												library.flags[dropdown.flag] = dropdown.value
												dropdown.valueLabel.Text = optionName
												dropdown.callback(dropdown.value)
												dropdown:SetOpen(false)
											end
										end)
										
										dropdown.options[optionName] = optionData
										return optionData
									end
									
									function dropdown:SetOpen(state)
										dropdown.isOpen = state
										dropdown.holder.Visible = state
										dropdown.icon.Text = state and "-" or "+"
										dropdown.icon.Position = state and newUDim2(0, -5, 0, -1) or newUDim2(0, -4, 0, -1)
									end
									
									function dropdown:Set(value)
										if dropdown.multi then
											if type(value) ~= "table" then return end
											dropdown.value = value
											
											for _, opt in pairs(dropdown.options) do
												opt.selected = false
												opt:Toggle(false)
											end
											
											for _, v in pairs(value) do
												if dropdown.options[v] then
													dropdown.options[v].selected = true
													dropdown.options[v]:Toggle(true)
												end
											end
											
											library.flags[dropdown.flag] = dropdown.value
											dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
										else
											if not dropdown.options[value] then return end
											
											for _, opt in pairs(dropdown.options) do
												opt.selected = false
												opt:Toggle(false)
											end
											
											dropdown.options[value].selected = true
											dropdown.options[value]:Toggle(true)
											dropdown.value = value
											library.flags[dropdown.flag] = dropdown.value
											dropdown.valueLabel.Text = value
										end
										
										dropdown.callback(dropdown.value)
									end
									
									function dropdown:Get()
										return dropdown.value
									end
								end
								
								-- add all items
								for _, item in pairs(dropdown.items) do
									dropdown:AddOption(item)
								end
								
								-- создаем невидимую кнопку для клика
								local clickButton = utility:create("TextButton", {
									Parent = dropdownButton,
									BackgroundTransparency = 1,
									Size = newUDim2(1, 0, 1, 0),
									Text = "",
									ZIndex = 106
								})
								
								library.connections[#library.connections + 1] = clickButton.MouseButton1Click:Connect(function()
									dropdown:SetOpen(not dropdown.isOpen)
								end)
								
								-- set default
								if dropdown.default then
									dropdown:Set(dropdown.default)
								end
								
								return dropdown
							end
							
							return section
						end
					end
					
					tab.subtabs[#tab.subtabs + 1] = subtab
					
					return subtab
				end
			end
			
			-- CreateSection для Tab (только если нет subtabs)
			function tab:CreateSection(properties)
				if #tab.subtabs > 0 then
					error("Cannot create section in tab with subtabs. Use subtab:CreateSection() instead.")
					return
				end
				
				properties = properties or {}
				
				local section = {
					name = properties.Name or "Section",
					side = properties.Side or 1,
					tab = tab,
					window = tab.window
				}
				
				do -- // Section UI
					local sectionFrame = utility:create("Frame", {
						Name = "Section",
						Parent = tab.columnsData[section.side],
						BackgroundColor3 = library.Theme["Inline"],
						BackgroundTransparency = 0,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 0),
						AutomaticSize = Enum.AutomaticSize.Y,
						ZIndex = 102
					})
					
					-- section outline
					utility:create("UIStroke", {
						Parent = sectionFrame,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- section background
					local sectionBackground = utility:create("Frame", {
						Name = "Background",
						Parent = sectionFrame,
						BackgroundColor3 = library.Theme["Page Background"],
						BackgroundTransparency = 0,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 1, 0, 1),
						Size = newUDim2(1, -2, 1, -2),
						ZIndex = 102
					})
					
					-- section text
					local sectionText = utility:create("TextLabel", {
						Name = "Title",
						Parent = sectionBackground,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 6, 0, 4),
						AutomaticSize = Enum.AutomaticSize.XY,
						FontFace = library.Font,
						Text = section.name,
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						ZIndex = 103
					})
					
					-- text stroke
					utility:create("UIStroke", {
						Parent = sectionText,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- accent line
					local accentLine = utility:create("Frame", {
						Name = "AccentLine",
						Parent = sectionBackground,
						BackgroundColor3 = library.Theme["Accent"],
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 2),
						ZIndex = 103
					})
					
					-- elements container
					local elementsContainer = utility:create("Frame", {
						Name = "Elements",
						Parent = sectionBackground,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 0, 0, 20),
						Size = newUDim2(1, 0, 1, -20),
						AutomaticSize = Enum.AutomaticSize.Y,
						ZIndex = 102
					})
					
					-- uilistlayout
					utility:create("UIListLayout", {
						Parent = elementsContainer,
						Padding = newUDim(0, 4),
						HorizontalAlignment = Enum.HorizontalAlignment.Center,
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					-- padding
					utility:create("UIPadding", {
						Parent = elementsContainer,
						PaddingTop = newUDim(0, 4),
						PaddingBottom = newUDim(0, 4),
						PaddingLeft = newUDim(0, 4),
						PaddingRight = newUDim(0, 4)
					})
					
					-- index
					section.frame = sectionFrame
					section.background = sectionBackground
					section.container = elementsContainer
					section.text = sectionText
				end
				
				tab.sections[#tab.sections + 1] = section
				
				-- AddToggle для секции (таб без подвкладок)
				function section:AddToggle(properties)
					properties = properties or {}
					
					local toggle = {
						name = properties.Name or "Toggle",
						flag = properties.Flag or properties.Name or "Toggle",
						value = properties.Default or false,
						callback = properties.Callback or function() end,
						section = section
					}
					
					local toggleButton, indicator, toggleText
					
					do -- // Toggle UI
						-- toggle button
						toggleButton = utility:create("TextButton", {
							Name = "Toggle",
							Parent = section.container,
							BackgroundColor3 = library.Theme["Background"],
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(1, 0, 0, 15),
							AutoButtonColor = false,
							Text = "",
							ZIndex = 103
						})
						
						-- indicator
						indicator = utility:create("Frame", {
							Name = "Indicator",
							Parent = toggleButton,
							BackgroundColor3 = library.Theme["Element"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							AnchorPoint = newVector2(0, 0.5),
							Position = newUDim2(0, 0, 0.5, 0),
							Size = newUDim2(0, 10, 0, 10),
							ZIndex = 104
						})
						
						-- indicator outline
						utility:create("UIStroke", {
							Parent = indicator,
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Color = library.Theme["Outline"],
							Thickness = 1,
							LineJoinMode = Enum.LineJoinMode.Miter
						})
						
						-- indicator gradient
						utility:create("UIGradient", {
							Parent = indicator,
							Rotation = 90,
							Color = newColorSequence({
								newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
								newColorSequenceKeypoint(1, fromRGB(127, 127, 127))
							})
						})
						
						-- toggle text
						toggleText = utility:create("TextLabel", {
							Name = "Text",
							Parent = toggleButton,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 18, 0, -1),
							Size = newUDim2(1, -18, 1, 0),
							FontFace = library.Font,
							Text = toggle.name,
							TextColor3 = library.Theme["Text"],
							TextSize = 12,
							TextXAlignment = Enum.TextXAlignment.Left,
							ZIndex = 104
						})
						
						-- right holder для colorpicker/keybind элементов
						local rightHolder = utility:create("Frame", {
							Name = "RightHolder",
							Parent = toggleButton,
							BackgroundTransparency = 1,
							AnchorPoint = newVector2(1, 0.5),
							Position = newUDim2(1, -2, 0.5, 0),
							Size = newUDim2(0, 0, 0, 12),
							ZIndex = 104
						})
						
						utility:create("UIListLayout", {
							Parent = rightHolder,
							FillDirection = Enum.FillDirection.Horizontal,
							HorizontalAlignment = Enum.HorizontalAlignment.Right,
							VerticalAlignment = Enum.VerticalAlignment.Center,
							Padding = newUDim(0, 4),
							SortOrder = Enum.SortOrder.LayoutOrder
						})
						
						-- index
						toggle.button = toggleButton
						toggle.indicator = indicator
						toggle.text = toggleText
						toggle.holder = toggleButton
						toggle.rightHolder = rightHolder
					end
					
					do -- // Toggle Functions
						function toggle:Set(value)
							toggle.value = value
							library.flags[toggle.flag] = toggle.value
							
							if toggle.value then
								utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Accent"]}, 0.2)
								utility:tween(toggle.text, {TextColor3 = library.Theme["Accent"]}, 0.2)
							else
								utility:tween(toggle.indicator, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
								utility:tween(toggle.text, {TextColor3 = library.Theme["Text"]}, 0.2)
							end
							
							toggle.callback(toggle.value)
						end
						
						function toggle:Get()
							return toggle.value
						end
					end
					
					-- click event (оптимизировано)
				library.connections[#library.connections + 1] = toggleButton.MouseButton1Click:Connect(function()
					toggle:Set(not toggle.value)
				end)
					
					-- set default
					if properties.Default then
						toggle:Set(properties.Default)
					end
					
					-- AddColorpicker для toggle
				function toggle:AddColorpicker(properties)
					properties = properties or {}
					
					local colorpicker = {
						name = properties.Name or "Color",
						flag = properties.Flag or toggle.flag .. "_Color",
						default = properties.Default or fromRGB(255, 255, 255),
						alpha = properties.Alpha or 1,
						callback = properties.Callback or function() end,
						
						-- HSV значения
						hue = 0,
						saturation = 1,
						value = 1,
						
						-- состояние
						isOpen = false,
						color = fromRGB(255, 255, 255)
					}
					
					local colorButton, colorButtonFrame
					
					do -- // Colorpicker UI
						-- outline (внешняя рамка)
						colorButton = utility:create("TextButton", {
							Name = "ColorButton",
							Parent = toggle.rightHolder,
							BackgroundColor3 = library.Theme["Outline"],
							BorderSizePixel = 0,
							Size = newUDim2(0, 24, 0, 10),
							AutoButtonColor = false,
							Text = "",
							ZIndex = 105
						})
						
						utility:create("UIStroke", {
							Parent = colorButton,
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Color = library.Theme["Outline"],
							Thickness = 1,
							LineJoinMode = Enum.LineJoinMode.Miter
						})
						
						-- inline (средняя рамка)
						local colorInline = utility:create("Frame", {
							Name = "Inline",
							Parent = colorButton,
							BackgroundColor3 = library.Theme["Border"],
							BorderSizePixel = 0,
							Position = newUDim2(0, 1, 0, 1),
							Size = newUDim2(1, -2, 1, -2),
							ZIndex = 105
						})
						
						-- handler (внутренний контейнер)
						local colorHandler = utility:create("Frame", {
							Name = "Handler",
							Parent = colorInline,
							BackgroundColor3 = fromRGB(255, 255, 255),
							BorderSizePixel = 0,
							Position = newUDim2(0, 1, 0, 1),
							Size = newUDim2(1, -2, 1, -2),
							ZIndex = 105
						})
						
						-- клеточки для показа прозрачности
						utility:create("ImageLabel", {
							Parent = colorHandler,
							Image = "rbxassetid://18274452449",
							ScaleType = Enum.ScaleType.Tile,
							TileSize = newUDim2(0, 4, 0, 4),
							BackgroundTransparency = 1,
							Size = newUDim2(1, 0, 1, 0),
							ZIndex = 105
						})
						
						-- цветной слой поверх клеточек
						colorButtonFrame = utility:create("Frame", {
							Parent = colorHandler,
							BackgroundColor3 = colorpicker.default,
							BackgroundTransparency = 1 - colorpicker.alpha,
							BorderSizePixel = 0,
							Size = newUDim2(1, 0, 1, 0),
							ZIndex = 106
						})
						
						colorpicker.button = colorButton
						colorpicker.colorFrame = colorButtonFrame
					end
					
					do -- // Colorpicker Functions
						function colorpicker:Set(color, alpha)
							colorpicker.color = color or fromRGB(255, 255, 255)
							colorpicker.alpha = alpha or 1
							
							-- обновляем цвет и прозрачность
							utility:tween(colorpicker.colorFrame, {
								BackgroundColor3 = colorpicker.color,
								BackgroundTransparency = 1 - colorpicker.alpha
							}, 0.2)
							
							-- сохраняем в флаги
							library.flags[colorpicker.flag] = {
								Color = colorpicker.color,
								Alpha = colorpicker.alpha,
								HexValue = "#" .. colorpicker.color:ToHex()
							}
							
							-- callback
							colorpicker.callback(colorpicker.color, colorpicker.alpha)
						end
						
						function colorpicker:Get()
							return colorpicker.color, colorpicker.alpha
						end
					end
					
					-- click event
					library.connections[#library.connections + 1] = colorButton.MouseButton1Click:Connect(function()
						-- TODO: открыть colorpicker окно
						print("Colorpicker clicked for", colorpicker.name)
					end)
					
					-- set default
					colorpicker:Set(colorpicker.default, colorpicker.alpha)
					
					return colorpicker
				end
				
				return toggle
			end
			
			-- AddSlider для секции (таб без подвкладок)
				function section:AddSlider(properties)
					properties = properties or {}
					
					local slider = {
						name = properties.Name or "Slider",
						flag = properties.Flag or properties.Name or "Slider",
						min = properties.Min or 0,
						max = properties.Max or 100,
						default = properties.Default or 50,
						decimals = properties.Decimals or 1,
						suffix = properties.Suffix or "",
						value = properties.Default or 50,
						callback = properties.Callback or function() end,
						dragging = false
					}
					
					local sliderFrame, sliderText, sliderOutline, sliderBackground, sliderFill, sliderValue
					
					do -- // Slider UI
						sliderFrame = utility:create("Frame", {
							Name = "Slider",
							Parent = section.container,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(1, 0, 0, slider.name and 27 or 10),
							ZIndex = 103
						})
						
						if slider.name then
							sliderText = utility:create("TextLabel", {
								Name = "Text",
								Parent = sliderFrame,
								BackgroundTransparency = 1,
								BorderColor3 = fromRGB(0, 0, 0),
								BorderSizePixel = 0,
								Position = newUDim2(0, 1, 0, 0),
								Size = newUDim2(1, -2, 0, 12),
								FontFace = library.Font,
								Text = slider.name,
								TextColor3 = library.Theme["Text"],
								TextSize = 12,
								TextXAlignment = Enum.TextXAlignment.Left,
								ZIndex = 104
							})
							
							utility:create("UIStroke", {
								Parent = sliderText,
								Color = library.Theme["Text Border"],
								Thickness = 1,
								LineJoinMode = Enum.LineJoinMode.Miter
							})
						end
						
						sliderOutline = utility:create("TextButton", {
							Name = "Outline",
							Parent = sliderFrame,
							BackgroundColor3 = library.Theme["Outline"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 4, 0, slider.name and 17 or 0),
							Size = newUDim2(1, -8, 0, 10),
							AutoButtonColor = false,
							Text = "",
							ZIndex = 104
						})
						
						sliderBackground = utility:create("Frame", {
							Name = "Background",
							Parent = sliderOutline,
							BackgroundColor3 = library.Theme["Element"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 1, 0, 1),
							Size = newUDim2(1, -2, 1, -2),
							ZIndex = 105
						})
						
						utility:create("UIGradient", {
							Parent = sliderBackground,
							Rotation = 90,
							Color = newColorSequence({
								newColorSequenceKeypoint(0, fromRGB(30, 30, 35)),
								newColorSequenceKeypoint(1, fromRGB(23, 23, 28))
							})
						})
						
						sliderFill = utility:create("Frame", {
							Name = "Fill",
							Parent = sliderBackground,
							BackgroundColor3 = library.Theme["Accent"],
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(0.5, 0, 1, 0),
							ZIndex = 106
						})
						
						utility:create("UIGradient", {
							Parent = sliderFill,
							Rotation = 90,
							Color = newColorSequence({
								newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
								newColorSequenceKeypoint(1, fromRGB(42, 42, 42))
							})
						})
						
						sliderValue = utility:create("TextLabel", {
							Name = "Value",
							Parent = sliderFill,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							AnchorPoint = newVector2(0.5, 0.5),
							Position = newUDim2(1, 0, 0.5, 1),
							Size = newUDim2(0, 50, 0, 12),
							FontFace = library.Font,
							Text = "50",
							TextColor3 = fromRGB(235, 235, 235),
							TextSize = 12,
							ZIndex = 107
						})
						
						utility:create("UIStroke", {
							Parent = sliderValue,
							Color = library.Theme["Text Border"],
							Thickness = 1,
							LineJoinMode = Enum.LineJoinMode.Miter
						})
						
						slider.frame = sliderFrame
						slider.text = sliderText
						slider.outline = sliderOutline
						slider.background = sliderBackground
						slider.fill = sliderFill
						slider.valueLabel = sliderValue
					end
					
					do -- // Slider Functions
						function slider:Set(value)
							slider.value = clamp(floor(value / slider.decimals + 0.5) * slider.decimals, slider.min, slider.max)
							library.flags[slider.flag] = slider.value
							
							slider.valueLabel.Text = tostring(slider.value) .. slider.suffix
							
							local percentage = (slider.value - slider.min) / (slider.max - slider.min)
							utility:tween(slider.fill, {Size = newUDim2(percentage, 0, 1, 0)}, 0.1)
							
							slider.callback(slider.value)
						end
						
						function slider:Get()
							return slider.value
						end
						
						function slider:UpdateValue()
							local mousePos = uis:GetMouseLocation().X
							local sliderPos = slider.outline.AbsolutePosition.X
							local sliderSize = slider.outline.AbsoluteSize.X
							local percentage = clamp((mousePos - sliderPos) / sliderSize, 0, 1)
							local value = slider.min + (slider.max - slider.min) * percentage
							slider:Set(value)
						end
					end
					
					library.connections[#library.connections + 1] = sliderOutline.MouseButton1Down:Connect(function()
						library.activeSlider = slider
						slider:UpdateValue()
					end)
					
					slider:Set(slider.default)
				
				return slider
			end
			
			-- AddTextbox для секции (таб без подвкладок)
			function section:AddTextbox(properties)
				properties = properties or {}
				
				local textbox = {
					name = properties.Name or "Textbox",
					flag = properties.Flag or properties.Name or "Textbox",
					placeholder = properties.Placeholder or "...",
					default = properties.Default or "",
					callback = properties.Callback or function() end,
					value = "",
					section = section
				}
				
				local textboxContainer, textboxBackground, textboxInput
				
				do -- // Textbox UI
					-- контейнер textbox
					textboxContainer = utility:create("Frame", {
						Name = "TextboxContainer",
						Parent = section.container,
						BackgroundTransparency = 1,
						Size = newUDim2(1, 0, 0, 34),
						ZIndex = 104
					})
					
					-- текст названия
					local textboxLabel = utility:create("TextLabel", {
						Name = "Label",
						Parent = textboxContainer,
						BackgroundTransparency = 1,
						Size = newUDim2(1, 0, 0, 13),
						FontFace = library.Font,
						Text = textbox.name,
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						ZIndex = 104
					})
					
					utility:create("UIStroke", {
						Parent = textboxLabel,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- background (outline)
					textboxBackground = utility:create("Frame", {
						Name = "Background",
						Parent = textboxContainer,
						BackgroundColor3 = library.Theme["Element"],
						BorderColor3 = library.Theme["Border"],
						BorderSizePixel = 2,
						Position = newUDim2(0, 0, 1, 0),
						AnchorPoint = newVector2(0, 1),
						Size = newUDim2(1, 0, 0, 17),
						ZIndex = 104
					})
					
					utility:create("UIGradient", {
						Parent = textboxBackground,
						Rotation = 90,
						Color = newColorSequence({
							newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
							newColorSequenceKeypoint(1, fromRGB(100, 100, 100))
						})
					})
					
					utility:create("UIStroke", {
						Parent = textboxBackground,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- textbox input
					textboxInput = utility:create("TextBox", {
						Name = "Input",
						Parent = textboxBackground,
						BackgroundTransparency = 1,
						Size = newUDim2(1, 0, 1, 0),
						FontFace = library.Font,
						Text = "",
						PlaceholderText = textbox.placeholder,
						PlaceholderColor3 = fromRGB(178, 178, 178),
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						ClearTextOnFocus = false,
						ZIndex = 105
					})
					
					utility:create("UIPadding", {
						Parent = textboxInput,
						PaddingLeft = newUDim(0, 5),
						PaddingBottom = newUDim(0, 3)
					})
					
					utility:create("UIStroke", {
						Parent = textboxInput,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					textbox.container = textboxContainer
					textbox.background = textboxBackground
					textbox.input = textboxInput
				end
				
				do -- // Textbox Functions
					function textbox:Set(value)
						textbox.value = value or ""
						textbox.input.Text = textbox.value
						library.flags[textbox.flag] = textbox.value
						textbox.callback(textbox.value)
					end
					
					function textbox:Get()
						return textbox.value
					end
				end
				
				-- hover effect
				library.connections[#library.connections + 1] = textboxBackground.MouseEnter:Connect(function()
					utility:tween(textboxBackground, {BackgroundColor3 = library.Theme["Hovered Element"]}, 0.2)
				end)
				
				library.connections[#library.connections + 1] = textboxBackground.MouseLeave:Connect(function()
					utility:tween(textboxBackground, {BackgroundColor3 = library.Theme["Element"]}, 0.2)
				end)
				
				-- focus events
				library.connections[#library.connections + 1] = textboxInput.Focused:Connect(function()
					utility:tween(textboxInput, {TextColor3 = library.Theme["Accent"]}, 0.2)
				end)
				
				library.connections[#library.connections + 1] = textboxInput.FocusLost:Connect(function()
					utility:tween(textboxInput, {TextColor3 = library.Theme["Text"]}, 0.2)
					textbox:Set(textboxInput.Text)
				end)
				
				-- set default
				if textbox.default ~= "" then
					textbox:Set(textbox.default)
				end
				
				return textbox
			end
			
			-- AddLabel для секции (таб без подвкладок)
			function section:AddLabel(properties)
				properties = properties or {}
				
				local label = {
					name = properties.Name or properties.Text or "Label",
					section = section
				}
				
				local labelFrame, labelText, rightHolder
				
				do -- // Label UI
					-- основной контейнер
					labelFrame = utility:create("TextLabel", {
						Name = "Label",
						Parent = section.container,
						BackgroundTransparency = 1,
						Size = newUDim2(1, -8, 0, 12),
						AutomaticSize = Enum.AutomaticSize.Y,
						FontFace = library.Font,
						Text = "",
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextYAlignment = Enum.TextYAlignment.Top,
						ZIndex = 104
					})
					
					utility:create("UIStroke", {
						Parent = labelFrame,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- left components (текст)
					local leftComponents = utility:create("Frame", {
						Name = "LeftComponents",
						Parent = labelFrame,
						BackgroundTransparency = 1,
						Position = newUDim2(0, 2, 0, -1),
						Size = newUDim2(0, 0, 0, 14),
						ZIndex = 104
					})
					
					labelText = utility:create("TextLabel", {
						Name = "Text",
						Parent = leftComponents,
						BackgroundTransparency = 1,
						AutomaticSize = Enum.AutomaticSize.Y,
						FontFace = library.Font,
						Text = label.name,
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						ZIndex = 104
					})
					
					utility:create("UIStroke", {
						Parent = labelText,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					-- right holder для дополнительных элементов
					rightHolder = utility:create("Frame", {
						Name = "RightHolder",
						Parent = labelFrame,
						BackgroundTransparency = 1,
						AnchorPoint = newVector2(1, 0),
						Position = newUDim2(1, -1, 0, 1),
						Size = newUDim2(0, 0, 0, 12),
						ZIndex = 104
					})
					
					utility:create("UIListLayout", {
						Parent = rightHolder,
						FillDirection = Enum.FillDirection.Horizontal,
						HorizontalAlignment = Enum.HorizontalAlignment.Right,
						VerticalAlignment = Enum.VerticalAlignment.Center,
						Padding = newUDim(0, 4),
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					label.frame = labelFrame
					label.text = labelText
					label.rightHolder = rightHolder
				end
				
				do -- // Label Functions
					function label:SetText(text)
						label.name = text
						labelText.Text = text
					end
					
					function label:GetText()
						return label.name
					end
				end
				
				return label
			end
			
			-- AddDropdown для секции (таб без подвкладок)
			function section:AddDropdown(properties)
				properties = properties or {}
				
				local dropdown = {
					name = properties.Name or "Dropdown",
					flag = properties.Flag or properties.Name or "Dropdown",
					items = properties.Items or {"Option 1", "Option 2", "Option 3"},
					default = properties.Default or nil,
					multi = properties.Multi or false,
					value = properties.Multi and {} or nil,
					callback = properties.Callback or function() end,
					isOpen = false,
					options = {}
				}
				
				local dropdownFrame, dropdownText, dropdownButton, dropdownValue, dropdownIcon, optionHolder
				
				do -- // Dropdown UI
					dropdownFrame = utility:create("Frame", {
						Name = "Dropdown",
						Parent = section.container,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Size = newUDim2(1, 0, 0, 34),
						ZIndex = 103
					})
					
					dropdownText = utility:create("TextLabel", {
						Name = "Text",
						Parent = dropdownFrame,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 0, 0, 0),
						Size = newUDim2(1, 0, 0, 13),
						FontFace = library.Font,
						Text = dropdown.name,
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						ZIndex = 104
					})
					
					utility:create("UIStroke", {
						Parent = dropdownText,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					dropdownButton = utility:create("Frame", {
						Name = "Button",
						Parent = dropdownFrame,
						BackgroundColor3 = library.Theme["Background"],
						BorderColor3 = library.Theme["Border"],
						BorderSizePixel = 2,
						Position = newUDim2(0, 0, 1, -17),
						Size = newUDim2(1, 0, 0, 17),
						ZIndex = 104
					})
					
					utility:create("UIGradient", {
						Parent = dropdownButton,
						Rotation = 90,
						Color = newColorSequence({
							newColorSequenceKeypoint(0, fromRGB(255, 255, 255)),
							newColorSequenceKeypoint(1, fromRGB(100, 100, 100))
						})
					})
					
					utility:create("UIStroke", {
						Parent = dropdownButton,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					dropdownValue = utility:create("TextLabel", {
						Name = "Value",
						Parent = dropdownButton,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, 5, 0, -1),
						Size = newUDim2(1, -25, 1, 0),
						FontFace = library.Font,
						Text = "--",
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTruncate = Enum.TextTruncate.AtEnd,
						ZIndex = 105
					})
					
					utility:create("UIStroke", {
						Parent = dropdownValue,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					dropdownIcon = utility:create("TextLabel", {
						Name = "Icon",
						Parent = dropdownButton,
						BackgroundTransparency = 1,
						BorderColor3 = fromRGB(0, 0, 0),
						BorderSizePixel = 0,
						Position = newUDim2(0, -4, 0, -1),
						Size = newUDim2(1, 0, 1, 0),
						FontFace = library.Font,
						Text = "+",
						TextColor3 = library.Theme["Text"],
						TextSize = 12,
						TextXAlignment = Enum.TextXAlignment.Right,
						ZIndex = 105
					})
					
					utility:create("UIStroke", {
						Parent = dropdownIcon,
						Color = library.Theme["Text Border"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					optionHolder = utility:create("Frame", {
						Name = "OptionHolder",
						Parent = dropdownFrame,
						BackgroundColor3 = library.Theme["Inline"],
						BorderColor3 = library.Theme["Border"],
						BorderSizePixel = 2,
						Position = newUDim2(0, 0, 1, 5),
						Size = newUDim2(1, 0, 0, 0),
						AutomaticSize = Enum.AutomaticSize.Y,
						Visible = false,
						ZIndex = 115
					})
					
					utility:create("UIStroke", {
						Parent = optionHolder,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = library.Theme["Outline"],
						Thickness = 1,
						LineJoinMode = Enum.LineJoinMode.Miter
					})
					
					utility:create("UIListLayout", {
						Parent = optionHolder,
						SortOrder = Enum.SortOrder.LayoutOrder
					})
					
					utility:create("UIPadding", {
						Parent = optionHolder,
						PaddingBottom = newUDim(0, 2)
					})
					
					dropdown.frame = dropdownFrame
					dropdown.text = dropdownText
					dropdown.button = dropdownButton
					dropdown.valueLabel = dropdownValue
					dropdown.icon = dropdownIcon
					dropdown.holder = optionHolder
				end
				
				do -- // Dropdown Functions
					function dropdown:AddOption(optionName)
						local optionButton = utility:create("TextButton", {
							Name = "Option",
							Parent = dropdown.holder,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Size = newUDim2(1, 0, 0, 15),
							AutoButtonColor = false,
							Text = "",
							ZIndex = 116
						})
						
						local optionText = utility:create("TextLabel", {
							Name = "Text",
							Parent = optionButton,
							BackgroundTransparency = 1,
							BorderColor3 = fromRGB(0, 0, 0),
							BorderSizePixel = 0,
							Position = newUDim2(0, 5, 0, 0),
							Size = newUDim2(1, -5, 1, 0),
							FontFace = library.Font,
							Text = optionName,
							TextColor3 = library.Theme["Text"],
							TextTransparency = 0.48,
							TextSize = 12,
							TextXAlignment = Enum.TextXAlignment.Left,
							ZIndex = 117
						})
						
						utility:create("UIStroke", {
							Parent = optionText,
							Color = library.Theme["Text Border"],
							Thickness = 1,
							LineJoinMode = Enum.LineJoinMode.Miter
						})
						
						local optionData = {
							name = optionName,
							selected = false,
							button = optionButton,
							text = optionText
						}
						
						function optionData:Toggle(state)
							if state then
								utility:tween(optionData.text, {TextColor3 = library.Theme["Accent"], TextTransparency = 0}, 0.2)
							else
								utility:tween(optionData.text, {TextColor3 = library.Theme["Text"], TextTransparency = 0.48}, 0.2)
							end
						end
						
						optionButton.MouseButton1Click:Connect(function()
							if dropdown.multi then
								optionData.selected = not optionData.selected
								optionData:Toggle(optionData.selected)
								
								local index = table.find(dropdown.value, optionName)
								if index then
									table.remove(dropdown.value, index)
								else
									table.insert(dropdown.value, optionName)
								end
								
								library.flags[dropdown.flag] = dropdown.value
								dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
								dropdown.callback(dropdown.value)
							else
								for _, opt in pairs(dropdown.options) do
									opt.selected = false
									opt:Toggle(false)
								end
								
								optionData.selected = true
								optionData:Toggle(true)
								dropdown.value = optionName
								library.flags[dropdown.flag] = dropdown.value
								dropdown.valueLabel.Text = optionName
								dropdown.callback(dropdown.value)
								dropdown:SetOpen(false)
							end
						end)
						
						dropdown.options[optionName] = optionData
						return optionData
					end
					
					function dropdown:SetOpen(state)
						dropdown.isOpen = state
						dropdown.holder.Visible = state
						dropdown.icon.Text = state and "-" or "+"
						dropdown.icon.Position = state and newUDim2(0, -5, 0, -1) or newUDim2(0, -4, 0, -1)
					end
					
					function dropdown:Set(value)
						if dropdown.multi then
							if type(value) ~= "table" then return end
							dropdown.value = value
							
							for _, opt in pairs(dropdown.options) do
								opt.selected = false
								opt:Toggle(false)
							end
							
							for _, v in pairs(value) do
								if dropdown.options[v] then
									dropdown.options[v].selected = true
									dropdown.options[v]:Toggle(true)
								end
							end
							
							library.flags[dropdown.flag] = dropdown.value
							dropdown.valueLabel.Text = #dropdown.value > 0 and table.concat(dropdown.value, ", ") or "--"
						else
							if not dropdown.options[value] then return end
							
							for _, opt in pairs(dropdown.options) do
								opt.selected = false
								opt:Toggle(false)
							end
							
							dropdown.options[value].selected = true
							dropdown.options[value]:Toggle(true)
							dropdown.value = value
							library.flags[dropdown.flag] = dropdown.value
							dropdown.valueLabel.Text = value
						end
						
						dropdown.callback(dropdown.value)
					end
					
					function dropdown:Get()
						return dropdown.value
					end
				end
				
				for _, item in pairs(dropdown.items) do
					dropdown:AddOption(item)
				end
				
				-- button click (оптимизировано)
				local clickButton = utility:create("TextButton", {
					Parent = dropdownButton,
					BackgroundTransparency = 1,
					Size = newUDim2(1, 0, 1, 0),
					Text = "",
					ZIndex = 106
				})
				
				library.connections[#library.connections + 1] = clickButton.MouseButton1Click:Connect(function()
					dropdown:SetOpen(not dropdown.isOpen)
				end)
				
				if dropdown.default then
					dropdown:Set(dropdown.default)
				end
				
				return dropdown
			end
			
			return section
	end
		
		window.tabs[#window.tabs + 1] = tab
		
		return tab
	 end
	end
	
	library.windows[#library.windows + 1] = window
	
	-- глобальные обработчики для слайдеров (создаются один раз, оптимизированы)
	if #library.windows == 1 then
		local lastUpdate = 0
		local updateInterval = 1/60 -- 60 FPS cap для обновления слайдера
		
		library.connections[#library.connections + 1] = uis.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and library.activeSlider then
				local now = tick()
				if now - lastUpdate >= updateInterval then
					library.activeSlider:UpdateValue()
					lastUpdate = now
				end
			end
		end)
		
		library.connections[#library.connections + 1] = uis.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 and library.activeSlider then
				library.activeSlider:UpdateValue() -- финальное обновление
				library.activeSlider = nil
			end
		end)
	end
	
	return setmetatable(window, library)
end

-- // Example Usage
do
	-- создаем окно
	local window = library:CreateWindow({
		Name = "typescript",
		Size = UDim2.new(0, 600, 0, 700)
	})
	
	-- создаем вкладки
	local aimbotTab = window:CreateTab({
		Text = "Aimbot"
	})
	
	local visualsTab = window:CreateTab({
		Text = "Visuals"
	})
	
	-- создаем подвкладки для Visuals
	local espSubTab = visualsTab:CreateSubTab({
		Text = "ESP",
		Columns = 2
	})
	
	local worldSubTab = visualsTab:CreateSubTab({
		Text = "World",
		Columns = 2
	})
	
	local miscSubTab = visualsTab:CreateSubTab({
		Text = "Misc",
		Columns = 2
	})
	
	-- создаем секции для подвкладок
	local boxSection = espSubTab:CreateSection({
		Name = "Box ESP",
		Side = 1
	})
	
	local healthSection = espSubTab:CreateSection({
		Name = "Health Bar",
		Side = 1
	})
	
	local chamsSection = espSubTab:CreateSection({
		Name = "Chams",
		Side = 2
	})
	
	-- примеры элементов
	boxSection:AddToggle({
		Name = "Enabled",
		Flag = "BoxESP_Enabled",
		Default = false,
		Callback = function(value)
			print("Box ESP:", value)
		end
	})
	
	boxSection:AddSlider({
		Name = "Thickness",
		Flag = "BoxESP_Thickness",
		Min = 1,
		Max = 5,
		Default = 2,
		Decimals = 1,
		Suffix = "px",
		Callback = function(value)
			print("Box Thickness:", value)
		end
	})
	
	-- пример colorpicker
	local boxToggle = boxSection:AddToggle({
		Name = "Box Color",
		Flag = "BoxESP_ColorEnabled",
		Default = true,
		Callback = function(value)
			print("Box Color Enabled:", value)
		end
	})
	
	-- добавляем colorpicker к toggle
	boxToggle:AddColorpicker({
		Name = "Box Color",
		Flag = "BoxESP_Color",
		Default = fromRGB(255, 0, 0), -- красный по умолчанию
		Alpha = 1,
		Callback = function(color, alpha)
			print("Box Color:", color, "Alpha:", alpha)
		end
	})
	
	-- добавляем keybind к toggle
	boxToggle:AddKeybind({
		Name = "Box ESP Toggle",
		Flag = "BoxESP_Keybind",
		Key = Enum.KeyCode.B,
		Mode = "Toggle",
		Callback = function(active)
			print("Box ESP Keybind Active:", active)
		end
	})
	
	-- пример: несколько colorpicker на одном toggle
	local multiColorToggle = boxSection:AddToggle({
		Name = "Multi Colors",
		Flag = "MultiColors_Enabled",
		Default = false,
		Callback = function(value)
			print("Multi Colors:", value)
		end
	})
	
	multiColorToggle:AddColorpicker({
		Name = "Color 1",
		Flag = "MultiColor_1",
		Default = fromRGB(255, 0, 0),
		Alpha = 1,
		Callback = function(color, alpha)
			print("Color 1:", color)
		end
	})
	
	multiColorToggle:AddColorpicker({
		Name = "Color 2",
		Flag = "MultiColor_2",
		Default = fromRGB(0, 255, 0),
		Alpha = 1,
		Callback = function(color, alpha)
			print("Color 2:", color)
		end
	})
	
	multiColorToggle:AddColorpicker({
		Name = "Color 3",
		Flag = "MultiColor_3",
		Default = fromRGB(0, 0, 255),
		Alpha = 1,
		Callback = function(color, alpha)
			print("Color 3:", color)
		end
	})
	
	-- пример: несколько keybind на одном toggle
	local multiKeybindToggle = boxSection:AddToggle({
		Name = "Multi Keybinds",
		Flag = "MultiKeybinds_Enabled",
		Default = false,
		Callback = function(value)
			print("Multi Keybinds:", value)
		end
	})
	
	multiKeybindToggle:AddKeybind({
		Name = "Keybind 1",
		Flag = "MultiKeybind_1",
		Key = Enum.KeyCode.F,
		Mode = "Toggle",
		Callback = function(active)
			print("Keybind 1 Active:", active)
		end
	})
	
	multiKeybindToggle:AddKeybind({
		Name = "Keybind 2",
		Flag = "MultiKeybind_2",
		Key = Enum.KeyCode.G,
		Mode = "Hold",
		Callback = function(active)
			print("Keybind 2 Active:", active)
		end
	})
	
	-- пример: смешанные элементы (colorpicker + keybind)
	local mixedToggle = healthSection:AddToggle({
		Name = "Health Bar",
		Flag = "HealthBar_Enabled",
		Default = true,
		Callback = function(value)
			print("Health Bar:", value)
		end
	})
	
	mixedToggle:AddColorpicker({
		Name = "Health Color",
		Flag = "HealthBar_Color",
		Default = fromRGB(0, 255, 0),
		Alpha = 0.8,
		Callback = function(color, alpha)
			print("Health Color:", color, "Alpha:", alpha)
		end
	})
	
	mixedToggle:AddKeybind({
		Name = "Toggle Health Bar",
		Flag = "HealthBar_Keybind",
		Key = Enum.KeyCode.H,
		Mode = "Toggle",
		Callback = function(active)
			print("Health Bar Keybind:", active)
		end
	})
	
	mixedToggle:AddColorpicker({
		Name = "Background Color",
		Flag = "HealthBar_BgColor",
		Default = fromRGB(50, 50, 50),
		Alpha = 0.5,
		Callback = function(color, alpha)
			print("Background Color:", color)
		end
	})
	
	healthSection:AddDropdown({
		Name = "Style",
		Flag = "HealthBar_Style",
		Items = {"Bar", "Text", "Both"},
		Default = "Bar",
		Callback = function(value)
			print("Health Style:", value)
		end
	})
	
	local miscTab = window:CreateTab({
		Text = "Misc",
		Columns = 2
	})
	
	-- создаем секцию для таба без подвкладок
	local movementSection = miscTab:CreateSection({
		Name = "Movement",
		Side = 1
	})
	
	local utilitySection = miscTab:CreateSection({
		Name = "Utility",
		Side = 2
	})
	
	-- примеры textbox
	movementSection:AddTextbox({
		Name = "Walk Speed",
		Flag = "WalkSpeed",
		Placeholder = "Enter speed...",
		Default = "16",
		Callback = function(value)
			print("Walk Speed:", value)
		end
	})
	
	movementSection:AddTextbox({
		Name = "Jump Power",
		Flag = "JumpPower",
		Placeholder = "Enter power...",
		Default = "50",
		Callback = function(value)
			print("Jump Power:", value)
		end
	})
	
	utilitySection:AddTextbox({
		Name = "Player Name",
		Flag = "PlayerName",
		Placeholder = "Enter name...",
		Default = "",
		Callback = function(value)
			print("Player Name:", value)
		end
	})
	
	utilitySection:AddTextbox({
		Name = "Custom Message",
		Flag = "CustomMessage",
		Placeholder = "Type message...",
		Default = "Hello World!",
		Callback = function(value)
			print("Custom Message:", value)
		end
	})
	
	-- примеры label
	movementSection:AddLabel({
		Text = "Movement Settings"
	})
	
	movementSection:AddLabel({
		Text = "Use these to modify player movement"
	})
	
	utilitySection:AddLabel({
		Text = "Utility Options"
	})
	
	local dynamicLabel = utilitySection:AddLabel({
		Text = "Status: Idle"
	})
	
	-- пример изменения текста label
	task.spawn(function()
		task.wait(3)
		dynamicLabel:SetText("Status: Active")
	end)
	
	local settingsTab = window:CreateTab({
		Text = "Settings",
		Columns = 1
	})
	
end
